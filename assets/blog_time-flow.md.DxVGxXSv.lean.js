import{_ as a,c as p,a1 as r,o as e}from"./chunks/framework.CjPQ6buQ.js";const u=JSON.parse('{"title":"时间流","description":"","frontmatter":{"title":"时间流","customTag":"blog>个人思考","editLink":true,"date":"2024.08.04"},"headers":[],"relativePath":"blog/time-flow.md","filePath":"blog/time-flow.md","lastUpdated":1727835117000}'),i={name:"blog/time-flow.md"};function l(s,t,d,n,o,h){return e(),p("div",null,t[0]||(t[0]=[r('<h1 id="时间流管理" tabindex="-1">“时间流管理“ <a class="header-anchor" href="#时间流管理" aria-label="Permalink to &quot;“时间流管理“&quot;">​</a></h1><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804114922.png" alt="image.png"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在信息爆炸的今天，</p><p>我们大多时间都在消费着各种各样的内容，</p><p>无论是社交媒体，内容平台，生活服务平台，搜索引擎等，</p><p>都用着更丰富的内容形态，</p><p>来占用我们注意力和时间。</p><p>我比较想把这个现象称为“<strong>内容太多，时间太少，信息也太少</strong>”。</p><p>这里具体做好定义，不然担心有些误解。</p><ul><li><strong>内容太多</strong>：日常使用的 App 大多都开始做内容了，字节的抖音，小红书，微信公众号和视频号，百度搜索做内容，支付宝做内容。feed 是刷不完的。</li><li><strong>时间太少</strong>：内容目前更多是短、平、快，不断给用户刺激，用户不断地获得即时反馈，这可能也是刷短视频能刷很久的原因。以至于抖音有 7 亿日活，人均日使用时长也有恐怖的2个小时。</li><li><strong>信息太少</strong>：日常在消费的内容，大多是用不上的。也许只有 5%～10% 的内容对你而言是信息，其他的可能就只是普通的内容。</li></ul><p>而从二八原则的角度来看，我们应该为重要的内容(20%)，去投入比较多的精力（80%），这样子可能才能让我们内容消费的效率比较高。</p><p>于是，我们要做的主要有两个点</p><ul><li>提高有效内容的比例。</li><li>时间更多消费在有效的内容中。</li></ul><p>这里，我想具体聊聊时间管理。关于内容筛选的话，后续找个时间写写博客吧。</p><h2 id="时间管理" tabindex="-1">时间管理 <a class="header-anchor" href="#时间管理" aria-label="Permalink to &quot;时间管理&quot;">​</a></h2><p>时间管理的本质是为了达成某种目的，从而针对现状对时间资源进行控制和分配（这里的目的可能效率最高，心情最开心/放松）。</p><p>时间管理我们需要做的是</p><ul><li>时间主动权</li><li>时间分片</li><li>时间利用效率</li></ul><h2 id="时间主动权" tabindex="-1">时间主动权 <a class="header-anchor" href="#时间主动权" aria-label="Permalink to &quot;时间主动权&quot;">​</a></h2><aside> 💡 主动权：留意时间流向 &amp; 识别问题。 </aside><p>这里我主要想讲的是控制，这个很重要，因为这意味着你自己去接触，把控时间了⌚️，也就是主动。</p><p>当你开始主动控制时间的话，有两点现象大概也会出现在你身上。</p><h3 id="🔍-留意时间的流向" tabindex="-1">🔍 留意时间的流向 <a class="header-anchor" href="#🔍-留意时间的流向" aria-label="Permalink to &quot;🔍 留意时间的流向&quot;">​</a></h3><p>当你开始留意时间，</p><p>也是你会打开手机的屏幕使用时长，</p><p>看到日均使用手机是 5/6 个小时，</p><p>但你不知道这段时间具体做了啥。</p><p>当你开始留意时间，</p><p>以前你会看到你明明只想进 App 完成一件事，</p><p>不知不觉就跳到了其他 App，</p><p>而其他 App 帮你杀时间，</p><p>于是本来你几分钟能搞定的事，</p><p>会变成几十分钟，或者一小时。</p><p>也许你会发现，你花了好多时间，但是你貌似没有从花到的时间中获取有价值的信息。</p><p>也是你会觉得这投入产出比不高，效率比较低。</p><p>但是没关系，能意识到这点，我觉得已经 ok 了。</p><p>这是“发现问题”的步骤，这就是第一步。</p><h3 id="🙋-识别问题" tabindex="-1">🙋 识别问题 <a class="header-anchor" href="#🙋-识别问题" aria-label="Permalink to &quot;🙋 识别问题&quot;">​</a></h3><p>当你已经发现有这个问题了，那其实我们可以具体来识别问题。</p><ul><li>我一天/一周/一个月的时间都怎么分配的</li><li>重要的事情，投入天 的多时间。</li></ul><p>这东西，你可以借助一些工具</p><ul><li>手机/电脑自带的统计工具</li><li>toggl 等记录任务时间的工具。</li></ul><p>分析完之后，我们就可以根据具体内容，然后结合一些原则/方法，来解决问题，提高效率。</p><p>但终究要做的两个点，即量和质是</p><ul><li>量：划出更多自己的时间</li><li>质：时间端的效率</li></ul><p>对于量和质，下面我具体举例子和方案</p><h2 id="时间分片" tabindex="-1">时间分片 <a class="header-anchor" href="#时间分片" aria-label="Permalink to &quot;时间分片&quot;">​</a></h2><aside> 💡 时间分片：解决量的问题，定好自己的工作时间单元，并减少自己的碎片化时间。本质上是个时间规划问题。 </aside><p>每个人每天都有相同的时间么？是的，貌似每个人都有 24 小时，但其实自己能把控的时间不多。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804115003.png" alt="image.png"></p><p>我们在拆细一点</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804115014.png" alt="image.png"></p><p>其实，我们看到无论如何，我们在工作和通勤的时间在不断的被细分。</p><p>并且粒度越来细，也就是我们所说的碎片化时间（5mins）</p><p>所以其实按粒度来分，我们可以分为<strong>长时间</strong>和<strong>碎片化时间</strong>。</p><p>具体列一下对比</p><table><thead><tr><th></th><th>碎片化时间</th><th>长时间</th></tr></thead><tbody><tr><td>时间范围</td><td>5-15mins</td><td>30-60 mins</td></tr><tr><td>深度/浅度</td><td>快速获取信息，但不深。</td><td>深度获取信息，但不快。深层工作。</td></tr><tr><td>获取效果</td><td>比较浅，可能容易遗忘。</td><td>会稍微比较深</td></tr><tr><td>场景</td><td>1. 日常新闻 2. 业界新闻 3. 放松</td><td>1. 技术难点 2. 深度思考 3. 工作。</td></tr></tbody></table><p>如果我们想利用好我们的时间，我们要以及定好自己的<strong>长时间工作单元，<strong>并且</strong>减少碎片化时间</strong>，</p><p>这些都是可能可以增加我们时间的做法。</p><h3 id="🔩-工作时间单元" tabindex="-1">🔩 工作时间单元 <a class="header-anchor" href="#🔩-工作时间单元" aria-label="Permalink to &quot;🔩 工作时间单元&quot;">​</a></h3><p>任务是有轻重缓急的，以及工作内容是有区分的。</p><p>于是，针对不同的工作内容我们可以指定我们的工作单元。</p><table><thead><tr><th>类型</th><th>时间单元</th></tr></thead><tbody><tr><td>睡觉</td><td>7-8h</td></tr><tr><td>看新闻</td><td>5mins</td></tr><tr><td>写代码</td><td>45 mins</td></tr><tr><td>会议</td><td>30-45 mins</td></tr><tr><td>浅层沟通</td><td>10-15mins</td></tr><tr><td>看书</td><td>30mins-1h</td></tr><tr><td>读视频</td><td>5mins</td></tr><tr><td>社交媒体</td><td>5mins</td></tr><tr><td>深层沟通</td><td>30-45mins</td></tr></tbody></table><p>当我们定好自己的类型和时间单元的时候，我们就可以给自己想要做的事情时间安排了。</p><p>就比如一天能存放很多时间，我们用不同的格子去进行存放。</p><h3 id="🧩-减少碎片化" tabindex="-1">🧩 减少碎片化 <a class="header-anchor" href="#🧩-减少碎片化" aria-label="Permalink to &quot;🧩 减少碎片化&quot;">​</a></h3><p>单我们定好时间的标准和单元之后，我们时间分配也就变得清晰了。</p><p>这个时候，我们可以看到我们的碎片化时间有多少。</p><p>以及，我们是否能通过某种方法减少碎片化时间。</p><p>减少碎片化时间的一个方法，就是将碎片化时间聚合。</p><p>3个 5mins 可能就是 3 个 5mins，但 6 个 5mins 就是 30mins</p><p>你完全可以通过 30mins 看书，听播客或做一点点有深度的工作。</p><p>聚合之后，也许我们就看到下图。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804115032.png" alt="image.png"> 通过碎片化时间的聚合，我们能形成将短任务 → 长任务。</p><p>我们可以花更多的时间在一些深度的工作内容上。</p><p>实际上，会发现我们的深度工作时间变多了。</p><p>总得来说，上面通过规定好工作单元以及减少碎片化时间，来增加我们深度工作的时间的量的问题。</p><p>但这只是方法论，我们可以借助 日历应用去具体实践 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804115046.png" alt="image.png"></p><h2 id="时间利用效率" tabindex="-1">时间利用效率 <a class="header-anchor" href="#时间利用效率" aria-label="Permalink to &quot;时间利用效率&quot;">​</a></h2><aside> 💡 时间效率：解决质的问题，通过事件队列和中断机制。本质是是个执行问题。 </aside><p>量的问题解决了，那么接下来主要是质的问题。</p><p>质主要看的是：我们具体执行的效率这么样，是不是因为分神等有一些偏差。</p><p>于是这就是我下来想讲的事件循环和中断机制。</p><h3 id="🚉-事件循环" tabindex="-1">🚉 事件循环 <a class="header-anchor" href="#🚉-事件循环" aria-label="Permalink to &quot;🚉 事件循环&quot;">​</a></h3><p>你可以想象，你目前有两个队列，一个是已经安排好的任务队列，一个是另外收集新任务的任务队列。</p><p>有点类似于 JS 的 宏任务队列和微任务队列。我们也称之为宏任务队列和微任务队列吧。</p><p>当你空闲的时候，你可以从宏任务队列中提取出任务，然后进行执行，执行的工作单元是 45mins 左右 ，当然如果完成了可以提前结束，但在这个过程，请做好这一件事相关的内容即可。。</p><p>但我们完成了这个工作单元后，我们去看看我们微任务队列有没有新增信息。如果有，我们则按优先级把它加入宏任务队列中。一般这个过程几分钟可以判断完的。</p><p>这里我们看到有两步</p><ul><li>具体执行任务：保证任务唯一性，一个工作单元尽可能做同一件事</li><li>检查新任务：用少量事件来进行新任务检查，处理好优先级。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240804115110.png" alt="image.png"></li></ul><h3 id="🔝-中断机制" tabindex="-1">🔝 中断机制 <a class="header-anchor" href="#🔝-中断机制" aria-label="Permalink to &quot;🔝 中断机制&quot;">​</a></h3><p>总所周知，JS 的执行同步任务的时候，是不可以中断的，这可能归功于机器的计算速度，但人类可能不太行。</p><p>因为有的时候确实有特别着急的事， 确实需要我们快速响应。</p><p>那这是否意味着我们需要不断的检查微任务。</p><p>我的理解是，大概不需要。</p><p>如果真的有紧急的事情，你不用自己去 pull, 这个信息也会自动的 push 给你。</p><p>我们只要在 push 的时候，判断一下优先级，然后判断是否切换任务即可。</p><p>总得来说，我们更希望的是一个事件能做的高效，所以我们做了事件循环</p><ul><li><strong>事件循环</strong>：保证任务唯一性、减少上下文切换、减少打断。</li><li><strong>中断机制</strong>：在保证任务执行质量的情况下，保证事件的优先级。</li></ul>',99)]))}const g=a(i,[["render",l]]);export{u as __pageData,g as default};
