import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.9a000b0e.js";const g=JSON.parse('{"title":"基于 OpenAI 的 API 快速搭建 ChaBot 🤖️","description":"","frontmatter":{"title":"基于 OpenAI 的 API 快速搭建 ChaBot 🤖️","customTag":"tech>AIGC","editLink":true},"headers":[],"relativePath":"tech/chat-bot.md","filePath":"tech/chat-bot.md","lastUpdated":1714879413000}'),p={name:"tech/chat-bot.md"},l=o(`<h1 id="基于-openai-的-api-快速搭建-chabot-🤖️" tabindex="-1">基于 OpenAI 的 API 快速搭建 ChaBot 🤖️ <a class="header-anchor" href="#基于-openai-的-api-快速搭建-chabot-🤖️" aria-label="Permalink to &quot;基于 OpenAI 的 API 快速搭建 ChaBot 🤖️&quot;">​</a></h1><h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h2><p>相信目前大家目前对 <code>ChatGPT</code> 应该多多少少有所接触。</p><p><code>ChatGPT</code> 是由 <code>OpenAI</code> 开发的一个人工智能模型，它使用了机器学习技术，尤其是自然语言处理（ <code>NLP</code>）技术，以理解和生成人类语言。这种模型基于大规模的文本数据进行训练，能够生成连贯且自然的文本，从而可以与人类进行自然语言对话。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/5ec16dbdc5fb4bf8bf1070470f2cf3ac%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled.png"></p><p>想必大家也多少体验过 <code>ChatGPT</code> 。但本文的话，更多是以开发者的视角，通过 <code>OpenAI</code> 提供的 <code>API</code> ,从而去搭建自己的 <code>ChatBot</code> ，最终可以实现如下图的<strong>微信公众号、飞书开放平台等第三方 IM 的接入</strong>。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/b5ce65b03a464e08aa30e65d7534d019~tplv-k3u1fbpfcp-watermark.image" alt="Untitled 1.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/76ef809791e94fb689f1ae5c5698b7dd%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 2.png"></p><p>在此之前，搭建 ChatBot 的所需要的东西</p><ul><li><strong>OpenAI</strong> 的 <strong>APIKey。</strong></li><li><strong>对前后端接口有了解</strong>。</li><li>对第三方 IM 平台接入开发有所了解/自己有开放的聊天服务。</li></ul><p>那么下面，我们就进入正题吧，我们从大体思路开始。</p><h2 id="二、大体思路" tabindex="-1">二、大体思路 <a class="header-anchor" href="#二、大体思路" aria-label="Permalink to &quot;二、大体思路&quot;">​</a></h2><p>在介绍大体思路之前，我们先思考我们构建 ChatBot 的意图是啥 🤔️。</p><p>本质上：<strong>就是通过社交 APP，通过 AI 的功能来加工回复用户的输入信息。</strong></p><p>确定好目标之后，我们如何来实现呢？我们可以看看如何改造我们社交软件回复的流程。</p><p>那首先，我们先来看看以往我们聊天软件是如何运行的。</p><h3 id="以往的流程" tabindex="-1">以往的流程 <a class="header-anchor" href="#以往的流程" aria-label="Permalink to &quot;以往的流程&quot;">​</a></h3><p>以往常见的流程其实会比较简单。如下图，本质上，这里有三个角色</p><ul><li><strong>User:</strong> 发起会话的用户，作为输入端。</li><li><strong>IM APP:</strong> 作为消息通信，信息分发的渠道。</li><li><strong>User / Chat Server:</strong> 回复会话的用户或者自己的聊天服务，作为输出端。</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/249a88fef32945188fa2001fa3dce682%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 3.png"> 从上方的图，我们可以看出来对用户的输入，往往是通过自己人工或者自己的聊天服务来进行回复用户的输入信息的，整个过程 <strong>IM APP</strong> 更多是最为一个渠道。</p><p>那么其实我们只需要对响应端即（User / Chat Server）进行改造就行了。</p><p><strong>ChatBot 的流程</strong></p><p>ChatBot 的流程其实很简单，将上方的响应端，换成 ChatBot Server，并且接入 OpenAI 的 API 就行了。</p><ul><li><strong>User：</strong> 发起会话的用户，作为输入端。</li><li><strong>IM APP:</strong> 作为消息通信，信息分发的渠道。</li><li><strong>ChatBot</strong>：处理用户输入的信息，调用 OpenAI 接口，获得响应信息，并加工信息作为回复。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cd5d04849d84f9eb01262fe318e237a~tplv-k3u1fbpfcp-watermark.image?" alt="Untitled 4.png"></p><p>注意：这里还有个 process message 的节点，本质上是对输入输出进行处理。</p><ul><li><strong>输入处理</strong>：主要是为了生成对应的 Prompt。</li><li><strong>输出处理</strong>：主要是对获得的 OpenAI 的响应，进行格式化处理。</li></ul><h2 id="三、具体实现流程" tabindex="-1">三、具体实现流程 <a class="header-anchor" href="#三、具体实现流程" aria-label="Permalink to &quot;三、具体实现流程&quot;">​</a></h2><p>有了上方的思路，其实我们主要要实现的两个点就是 <code>调用 OpenAI 接口</code> + <code>第三方 IM 平台集成</code> 。</p><p>注：由于第三方的接口涉及的文档会比较多，且各个开放平台应该都有对应的文档，所以，这里不会细讲第三方 IM 平台集成。</p><h3 id="_3-1-调用-gpt-接口" tabindex="-1">3.1 调用 GPT 接口 <a class="header-anchor" href="#_3-1-调用-gpt-接口" aria-label="Permalink to &quot;3.1 调用 GPT 接口&quot;">​</a></h3><blockquote><p>参考文档：</p><ul><li><a href="https://platform.openai.com/docs/libraries/node-js-library" target="_blank" rel="noreferrer">https://platform.openai.com/docs/libraries/node-js-library</a></li><li><a href="https://platform.openai.com/docs/guides/gpt/chat-completions-api" target="_blank" rel="noreferrer">https://platform.openai.com/docs/guides/gpt/chat-completions-api</a></li></ul></blockquote><p>目前 <code>openAI</code> 也有自己的 npm 包，目前接入的成本其实相对比较低。</p><p><strong>安装依赖</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">openai</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">openai</span></span></code></pre></div><p><strong>参数配置</strong></p><p>Notes:</p><ul><li><strong>APIKey 问题</strong>：登录 <a href="https://platform.openai.com/account/api-keys" target="_blank" rel="noreferrer">api_key</a>，免费额度使用完后，可能得自己绑卡了。</li><li><strong>网络问题</strong>：这里可能会存在网络链接不上的情况，可以自己去做一层代理转发，解决网络问题。可参考 <a href="https://blog.riba2534.cn/blog/2023/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B01%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BAopenai%E5%9B%BD%E5%86%85%E4%BB%A3%E7%90%86/" target="_blank" rel="noreferrer">OpenAI 代理</a></li></ul><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">Configuration</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">OpenAIApi</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;openai&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  apiKey: p<wbr>rocess.env.</span><span style="color:#79B8FF;">OPENAI_API_KEY</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  basePath: p<wbr>rocess.env.</span><span style="color:#79B8FF;">OPENAI_BASE_PATH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://api.openai.com/v1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 如果你做了代理转发的话</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">openai</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenAIApi</span><span style="color:#E1E4E8;">(configuration);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">Configuration</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">OpenAIApi</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;openai&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configuration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  apiKey: p<wbr>rocess.env.</span><span style="color:#005CC5;">OPENAI_API_KEY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  basePath: p<wbr>rocess.env.</span><span style="color:#005CC5;">OPENAI_BASE_PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://api.openai.com/v1&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 如果你做了代理转发的话</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">openai</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenAIApi</span><span style="color:#24292E;">(configuration);</span></span></code></pre></div><p><strong>调用接口</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chat_completion</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> openai.</span><span style="color:#B392F0;">createChatCompletion</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  model: </span><span style="color:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  messages: [{ role: </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, content: </span><span style="color:#9ECBFF;">&quot;Hello world&quot;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chat_completion</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> openai.</span><span style="color:#6F42C1;">createChatCompletion</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  model: </span><span style="color:#032F62;">&quot;gpt-3.5-turbo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  messages: [{ role: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, content: </span><span style="color:#032F62;">&quot;Hello world&quot;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>最终代码</strong></p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Configuration, OpenAIApi } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;openai&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChatGPT</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">openai</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenAIApi</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This constructor will be called when we create a new instance of the ChatGPT class</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Create a new instance of the OpenAI API</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      apiKey: p<wbr>rocess.env.</span><span style="color:#79B8FF;">OPENAI_API_KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      basePath: p<wbr>rocess.env.</span><span style="color:#79B8FF;">OPENAI_BASE_PATH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://api.openai.com/v1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">openai</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenAIApi</span><span style="color:#E1E4E8;">(configuration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.openai </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> openai;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This function will be called from the controller</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">chat</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prompt</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">llmResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.openai.</span><span style="color:#B392F0;">createChatCompletion</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      model: p<wbr>rocess.env.</span><span style="color:#79B8FF;">OPENAI_CHATBOT_MODEL_ID</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      messages: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        { role: </span><span style="color:#9ECBFF;">&quot;system&quot;</span><span style="color:#E1E4E8;">, content: </span><span style="color:#9ECBFF;">&quot;You are a helpful assistant.&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        { role: </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, content: prompt },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> llmResponse.data.choices[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].message.content;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Configuration, OpenAIApi } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;openai&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChatGPT</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">openai</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenAIApi</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This constructor will be called when we create a new instance of the ChatGPT class</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Create a new instance of the OpenAI API</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configuration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      apiKey: p<wbr>rocess.env.</span><span style="color:#005CC5;">OPENAI_API_KEY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      basePath: p<wbr>rocess.env.</span><span style="color:#005CC5;">OPENAI_BASE_PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://api.openai.com/v1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">openai</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenAIApi</span><span style="color:#24292E;">(configuration);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.openai </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> openai;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This function will be called from the controller</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">chat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">prompt</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">llmResponse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.openai.</span><span style="color:#6F42C1;">createChatCompletion</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      model: p<wbr>rocess.env.</span><span style="color:#005CC5;">OPENAI_CHATBOT_MODEL_ID</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gpt-3.5-turbo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      messages: [</span></span>
<span class="line"><span style="color:#24292E;">        { role: </span><span style="color:#032F62;">&quot;system&quot;</span><span style="color:#24292E;">, content: </span><span style="color:#032F62;">&quot;You are a helpful assistant.&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        { role: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, content: prompt },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> llmResponse.data.choices[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].message.content;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-2-平台集成" tabindex="-1">3.2 平台集成 <a class="header-anchor" href="#_3-2-平台集成" aria-label="Permalink to &quot;3.2 平台集成&quot;">​</a></h3><p>我们已经有了 API 的服务了，那么这个时候我们只需要将接口接入对应的平台即可。</p><blockquote><p>参考文档：</p><ul><li>微信公众号：<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html</a></li><li>飞书开放平台：<a href="https://open.feishu.cn/document/home/interactive-session-based-robot/subscribe-to-user-group-entry-events-and-send" target="_blank" rel="noreferrer">https://open.feishu.cn/document/home/interactive-session-based-robot/subscribe-to-user-group-entry-events-and-send</a></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/2679b00d5e194e5b82b24ef82771d7fe%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 2.png"></p><p>本质上是使用了 OpenAI <a href="https://platform.openai.com/docs/api-reference" target="_blank" rel="noreferrer">开放的 OpenAPI 接口</a> 以及 各个开放平台的 API 进行集成，一个简单的 chatBot 实际上就完成了。</p><ul><li><strong>OpenAI</strong>：提供文字回答服务。例如我们使用 <a href="https://platform.openai.com/docs/api-reference/chat" target="_blank" rel="noreferrer">chatApi</a>，就可以能简单地做一个文字的聊天服务。</li><li><strong>飞书、微信平台集成</strong>：各 APP 端多少都会开放对应的接口给到开发者，用于接收用户的信息，并对用户的信息进行回复。</li></ul><p>当然，简单的 ChatBot 你可以直接把用户的提示词和模型的响应直接进行返回，不做任何加工处理。</p><h2 id="四、补充拓展" tabindex="-1">四、补充拓展 <a class="header-anchor" href="#四、补充拓展" aria-label="Permalink to &quot;四、补充拓展&quot;">​</a></h2><p>上方简单写了如何搭建一个 <code>ChatBot</code>，但你可以借助 <code>OpenAI</code> 提供的能力去，尝试新的玩法，比如<strong>特定的提示词加工、多模态的交互。同时，你也可以结合 LangChain 做一些自己的应用。</strong></p><ul><li><strong>提示词加工</strong>：你可以指定特殊的提示词，从而去做一些扩展应用。比如 <a href="https://juejin.cn/post/7240333779221954616" target="_blank" rel="noreferrer">GPT + GitHub 实现自动 Code Review - 掘金</a></li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/8cd0653539c049b0963828aa96f81647%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/8970a6b9188646718f5820840a5aa943%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><p><strong>多模态的交互</strong>：目前 OPENAI 开放的 API 接口其实支持不同模态的交互，比如图片，语音。</p><ul><li><strong>图片</strong>：文生图，图生图。</li><li><strong>语音</strong>：语音转语音（另一国语言），语音转文字。</li></ul></li><li><p><strong>LangChain</strong>: LangChain 是一个用于开发大型语言模型应用的软件框架。它的目标是<strong>简化使用大型语言模型（LLMs）创建应用的过程</strong>。</p></li></ul><h2 id="五、总结" tabindex="-1"><strong>五、总结</strong> <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;**五、总结**&quot;">​</a></h2><p>本文简单介绍了如何搭建根据 OpenAI 提供的 API 搭建 ChatBOT，但更多是希望我们可以从开发者的视角去使用大语言模型，说不定会有新的想法出现呢。💡 有兴趣和想法的同学，可以在评论区留言一起讨论哈。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://chat.openai.com/?model=text-davinci-002-render-sha" target="_blank" rel="noreferrer">ChatGPT</a></li><li><a href="https://platform.openai.com/" target="_blank" rel="noreferrer">platform-openai</a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html" target="_blank" rel="noreferrer">微信公众开发平台</a></li><li><a href="https://open.feishu.cn/document/home/interactive-session-based-robot/subscribe-to-user-group-entry-events-and-send" target="_blank" rel="noreferrer">飞书开放平台</a></li></ul><p><strong>如果本文对你有一点点帮助或启发，希望可以点个赞哈 / 下方评论区评论 / 互关注 Github、公众号 学习交流，支持是创作的动力～</strong>。</p><ul><li><strong>公众号</strong>：华铧同学</li><li><strong>Github</strong>: <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fhua-bang" target="_blank" rel="noreferrer">github.com/hua-bang</a></li></ul>`,62),e=[l];function t(r,c,E,i,y,h){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{g as __pageData,d as default};
