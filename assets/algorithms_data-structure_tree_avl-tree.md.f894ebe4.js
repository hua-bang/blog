import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.71c8f1eb.js";const d=JSON.parse('{"title":"AVL 树","description":"","frontmatter":{"title":"AVL 树","customTag":"algorithms>数据结构>树","editLink":true},"headers":[],"relativePath":"algorithms/data-structure/tree/avl-tree.md","filePath":"algorithms/data-structure/tree/avl-tree.md","lastUpdated":1711287270000}'),p={name:"algorithms/data-structure/tree/avl-tree.md"},o=l(`<p>计算机领域中，AVL 树是一种平衡的二叉搜索树。在 AVL 树中，同一节点的两个子节点树的高度不会相差大于 1。如果在任何时候它们相差不止一个，则进行重新平衡以恢复此属性。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="二叉搜索树" tabindex="-1">二叉搜索树 <a class="header-anchor" href="#二叉搜索树" aria-label="Permalink to &quot;二叉搜索树&quot;">​</a></h3><p>前文有提及，这里不做过多描述了哈。<a href="/blog/algorithms/data-structure/tree/binary-search-tree.html">二叉搜索树</a></p><h3 id="平衡" tabindex="-1">平衡 <a class="header-anchor" href="#平衡" aria-label="Permalink to &quot;平衡&quot;">​</a></h3><p>由于平衡在不同的场景，不同的数据结构中，可能定义略为不一样。我们这里主要探讨在平衡二叉树上下文的定义。</p><p>在平衡二叉树的上下文中，指的是一种特定的树结构属性，它旨在减小树的高度，以优化各种树操作（如查找、插入、删除等）的效率。</p><p>在 AVL 树（一种自平衡二叉搜索树）中，“平衡”被定义为树中任意节点的左右子树的高度差的绝对值不超过 1。用数学语言来描述就是，对于任何节点 N，设其左子树的高度为 H_L，右子树的高度为 H_R，则满足|H_L - H_R| ≤ 1。</p><p>这种平衡条件确保了树的形状尽可能接近完全二叉树，从而保持树的高度最小，进而使得查找、插入、删除等操作能在对数时间内完成。</p><h3 id="平衡因子" tabindex="-1">平衡因子 <a class="header-anchor" href="#平衡因子" aria-label="Permalink to &quot;平衡因子&quot;">​</a></h3><p>平衡因子针对的对象是节点粒度。对于 AVL 树中的任何一个节点，其平衡因子被定义为该节点的左子树的高度减去其右子树的高度。用数学符号表示就是：\`平衡因子=高度(左子树)− 高度(右子树) <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324112302.png" alt="image.png"></p><h3 id="平衡情况" tabindex="-1">平衡情况 <a class="header-anchor" href="#平衡情况" aria-label="Permalink to &quot;平衡情况&quot;">​</a></h3><p><strong>左左情况</strong>：指的是一种特定的不平衡状态，其中一个节点的左子树的左侧更重（即左子树的高度大于右子树的高度），并且这种不平衡状态发生在两级连续的左子节点上。这种情况需要通过右旋转操作来修正不平衡。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324112433.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324103855.png" alt="image.png"></p><p><strong>右右情况</strong>：是与左左（LL）情况相对应的另一种特定不平衡场景。当在 AVL 树的某个节点的右子树的右侧添加一个新节点后，导致那个节点的右子树比左子树高出 2 级，这时就出现了 RR 不平衡。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324112516.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324103903.png" alt="image.png"></p><p><strong>左右不平衡</strong>： 左-右（LR）不平衡是 AVL 树中的一种特殊情况，当一个节点的左子树的右子树比它的左子树高时，会发生这种不平衡。更具体地说，LR 不平衡是在某个节点的左子树的右子树添加一个新节点后，导致该节点的左子树比右子树高 2 层，从而破坏了 AVL 树平衡因子的规则。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324112553.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324103913.png" alt="image.png"></p><p><strong>右-左（RL）不平衡</strong>：是 AVL 树中的一种特定不平衡情况。当在一个节点的右子树的左子树进行插入操作，导致这个节点的右子树的高度比左子树高 2 级时，就会发生 RL 不平衡。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324112703.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240324103922.png" alt="image.png"></p><h2 id="性质" tabindex="-1">性质 <a class="header-anchor" href="#性质" aria-label="Permalink to &quot;性质&quot;">​</a></h2><p>AVL 是一种平衡的二叉搜索树，我们抓住中间两个关键词，<code>平衡</code>, <code>二叉搜索树</code>。</p><p>那也就意味着有下方性质</p><ul><li><p><strong>高度平衡</strong>：对于 AVL 树中的每一个节点，<strong>其左子树和右子树的高度差（称为平衡因子）的绝对值不超过 1</strong>。这意味着 AVL 树是高度平衡的，从而保证了树的深度大约是 logN（N 为树中节点数），确保了操作的高效性。</p></li><li><p><strong>自平衡性</strong>： 当通过插入或删除操作破坏了 AVL 树的高度平衡后，树会通过一系列的旋转操作自动恢复平衡。这些旋转操作包括单旋转（左旋和右旋）和双旋转（左-右旋和右-左旋）。</p></li><li><p><strong>二叉搜索树的性质</strong>： AVL 树是一种特殊的二叉搜索树，所以<strong>它继承了二叉搜索树的所有性质</strong>。例如，对于任意节点，其左子树中的所有节点的值都小于该节点的值，而右子树中的所有节点的值都大于该节点的值。这一性质使得 AVL 树在执行查找、插入和删除操作时非常高效。</p></li><li><p><strong>动态数据结构</strong>： AVL 树是一个动态的数据结构，可以在<strong>保持高度平衡的情况下动态地插入和删除节点。</strong> 这使得 AVL 树非常适合于需要频繁更新的数据集合，如数据库索引和内存管理系统。</p></li><li><p><strong>路径最优性</strong>： 由于 AVL 树的高度平衡特性，<strong>任意节点到根节点的最长可能路径不会超过 logN</strong>，这保证了查找效率是对数级别的。因此，AVL 树在最坏情况下也能保证较好的查找性能。</p></li><li><p><strong>旋转复杂性</strong>： 尽管 AVL 树的旋转操作能够保证树的平衡，但这也意味着在每次插入或删除操作后可能需要进行多次旋转，这在某些情况下可能会导致操作成本较高。然而，通过智能地选择旋转类型和顺序，AVL 树能够最小化这种成本，以保证高效的操作性能。</p></li></ul><p>AVL 树通过这些性质，为许多应用提供了一个既高效又可靠的数据结构方案，特别是在那些对查找、插入和删除操作的性能要求较高的场合。</p><h2 id="旋转操作" tabindex="-1">旋转操作 <a class="header-anchor" href="#旋转操作" aria-label="Permalink to &quot;旋转操作&quot;">​</a></h2><p>从上文知道，AVL 主要是在插入/删除过程中进行不同的旋转，其中分为</p><ul><li><strong>右旋（Single Right Rotation）：</strong> 当某个节点的左子树比右子树高，且左子树的左子树比左子树的右子树高时，对该节点进行右旋。</li><li><strong>左旋（Single Left Rotation）：</strong> 当某个节点的右子树比左子树高，且右子树的右子树比右子树的左子树高时，对该节点进行左旋。</li><li><strong>左-右旋（Left-Right Rotation）：</strong> 当某个节点的左子树比右子树高，且左子树的右子树比左子树的左子树高时，先对该节点的左子树进行左旋，然后对该节点进行右旋。</li><li><strong>右-左旋（Right-Left Rotation）：</strong> 当某个节点的右子树比左子树高，且右子树的左子树比右子树的右子树高时，先对该节点的右子树进行右旋，然后对该节点进行左旋。</li></ul><h3 id="右旋" tabindex="-1">右旋 <a class="header-anchor" href="#右旋" aria-label="Permalink to &quot;右旋&quot;">​</a></h3><p>右旋转是一种在 AVL 树或其他自平衡二叉搜索树中用来修正不平衡的操作。当一个节点的左子树的高度比右子树的高度大 2 时，即发生了左左不平衡（LL），这时可以通过右旋转来恢复平衡。以下是一个需要右旋转的树的例子</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">A</span></span>
<span class="line"><span style="color:#e1e4e8;">     / \\</span></span>
<span class="line"><span style="color:#e1e4e8;">    B   C</span></span>
<span class="line"><span style="color:#e1e4e8;">   /</span></span>
<span class="line"><span style="color:#e1e4e8;">  D</span></span>
<span class="line"><span style="color:#e1e4e8;"> /</span></span>
<span class="line"><span style="color:#e1e4e8;">E</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">A</span></span>
<span class="line"><span style="color:#24292e;">     / \\</span></span>
<span class="line"><span style="color:#24292e;">    B   C</span></span>
<span class="line"><span style="color:#24292e;">   /</span></span>
<span class="line"><span style="color:#24292e;">  D</span></span>
<span class="line"><span style="color:#24292e;"> /</span></span>
<span class="line"><span style="color:#24292e;">E</span></span></code></pre></div><p><strong>右旋转步骤：</strong></p><ol><li><strong>确定旋转的节点</strong>： <ul><li>旋转发生在最小不平衡子树的根节点，在这个例子中是节点 B。</li></ul></li><li><strong>旋转的操作</strong>： <ul><li>将节点 D 作为 A 的左子节点。</li><li>将节点 B 降为节点 D 的右子节点。</li><li>如果节点 D 有右子节点，这个右子节点将成为节点 B 的左子节点。</li></ul></li><li><strong>更新引用</strong>： - 原本 A 的左子节点是 B，现在变成 D。 - 原本 B 的右子节点是 D，现在没有。 - D 没有右节点，现在是 B <strong>旋转后的树</strong></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">A</span></span>
<span class="line"><span style="color:#e1e4e8;">     / \\</span></span>
<span class="line"><span style="color:#e1e4e8;">    D   C</span></span>
<span class="line"><span style="color:#e1e4e8;">   / \\</span></span>
<span class="line"><span style="color:#e1e4e8;">  E   B</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">A</span></span>
<span class="line"><span style="color:#24292e;">     / \\</span></span>
<span class="line"><span style="color:#24292e;">    D   C</span></span>
<span class="line"><span style="color:#24292e;">   / \\</span></span>
<span class="line"><span style="color:#24292e;">  E   B</span></span></code></pre></div><p>经过右旋转，平衡因子重新计算，树的平衡被恢复。这是一种简化版的解释，实际的 AVL 树还会在每一步操作后更新每个节点的高度信息。</p><h3 id="左旋" tabindex="-1">左旋 <a class="header-anchor" href="#左旋" aria-label="Permalink to &quot;左旋&quot;">​</a></h3><p>左旋转是一种在 AVL 树或其他自平衡二叉搜索树中用来修正不平衡的操作。当一个节点的右子树的高度比左子树的高度大 2 时，即发生了右右不平衡（RR），这时可以通过左旋转来恢复平衡。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">A</span></span>
<span class="line"><span style="color:#e1e4e8;">    / \\</span></span>
<span class="line"><span style="color:#e1e4e8;">   B   C</span></span>
<span class="line"><span style="color:#e1e4e8;">	    \\</span></span>
<span class="line"><span style="color:#e1e4e8;">         D</span></span>
<span class="line"><span style="color:#e1e4e8;">          \\</span></span>
<span class="line"><span style="color:#e1e4e8;">           E</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">A</span></span>
<span class="line"><span style="color:#24292e;">    / \\</span></span>
<span class="line"><span style="color:#24292e;">   B   C</span></span>
<span class="line"><span style="color:#24292e;">	    \\</span></span>
<span class="line"><span style="color:#24292e;">         D</span></span>
<span class="line"><span style="color:#24292e;">          \\</span></span>
<span class="line"><span style="color:#24292e;">           E</span></span></code></pre></div><p><strong>右旋转步骤：</strong></p><ol><li><strong>确定旋转的节点</strong>： <ul><li>旋转发生在最小不平衡子树的根节点，在这个例子中是节点 A。</li></ul></li><li><strong>旋转的操作</strong>：</li></ol><ul><li>C 节点将成为新的根节点。</li><li>A 节点降级为 C 的左子节点。</li><li>如果 C 有左子节点，那么这个左子节点将变成 A 的右子节点</li></ul><ol><li><strong>更新引用</strong>： - 原本 A 的左子节点是 B，现在 B 将变成新的根节点。 - 原本 B 的右子节点是 D，D 保持不变。 - 原本 A 的右子节点是 C，现在 A 降级后 C 保持为 A 的右子节点。 <strong>旋转后的树</strong></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">C</span></span>
<span class="line"><span style="color:#e1e4e8;">   / \\</span></span>
<span class="line"><span style="color:#e1e4e8;">  A   D</span></span>
<span class="line"><span style="color:#e1e4e8;"> /     \\</span></span>
<span class="line"><span style="color:#e1e4e8;">B       E</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">C</span></span>
<span class="line"><span style="color:#24292e;">   / \\</span></span>
<span class="line"><span style="color:#24292e;">  A   D</span></span>
<span class="line"><span style="color:#24292e;"> /     \\</span></span>
<span class="line"><span style="color:#24292e;">B       E</span></span></code></pre></div><p>经过右旋转，平衡因子重新计算，树的平衡被恢复。这是一种简化版的解释，实际的 AVL 树还会在每一步操作后更新每个节点的高度信息。</p><p>代码实现</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> node.height;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">leftRotate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x.right</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">temp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> y.left;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  y.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  x.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  x.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">(x.left), </span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">(x.right)) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  y.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">(y.left), </span><span style="color:#B392F0;">getHeight</span><span style="color:#E1E4E8;">(y.right)) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Return new root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Usage example</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.right.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Making the tree right-heavy</span></span>
<span class="line"><span style="color:#E1E4E8;">root.right.right.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AVLNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Adding further imbalance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Assuming the tree needs a left rotation at the root</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newRoot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">leftRotate</span><span style="color:#E1E4E8;">(root);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node.height;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">leftRotate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.right</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">temp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y.left;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  y.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  x.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  x.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(x.left), </span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(x.right)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  y.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(y.left), </span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(y.right)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Return new root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Usage example</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">root.right.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Making the tree right-heavy</span></span>
<span class="line"><span style="color:#24292E;">root.right.right.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AVLNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Adding further imbalance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Assuming the tree needs a left rotation at the root</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newRoot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">leftRotate</span><span style="color:#24292E;">(root);</span></span></code></pre></div>`,48),e=[o];function t(r,c,y,i,E,g){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
