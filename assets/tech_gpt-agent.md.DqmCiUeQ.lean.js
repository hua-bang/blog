import{_ as i,c as a,a1 as n,o as t}from"./chunks/framework.Bkh0U0ho.js";const g=JSON.parse('{"title":"基于 GPT 实现 Agent  🤖️","description":"","frontmatter":{"title":"基于 GPT 实现 Agent  🤖️","customTag":"tech>AIGC","editLink":true,"date":"2023.11.02"},"headers":[],"relativePath":"tech/gpt-agent.md","filePath":"tech/gpt-agent.md","lastUpdated":1733962161000}'),h={name:"tech/gpt-agent.md"};function l(p,s,k,e,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="基于-gpt-实现-agent-🤖️" tabindex="-1">基于 GPT 实现 Agent 🤖️ <a class="header-anchor" href="#基于-gpt-实现-agent-🤖️" aria-label="Permalink to &quot;基于 GPT 实现 Agent 🤖️&quot;">​</a></h1><h2 id="一、引言" tabindex="-1">一、<strong>引言</strong> <a class="header-anchor" href="#一、引言" aria-label="Permalink to &quot;一、**引言**&quot;">​</a></h2><blockquote><p>前置阅读：</p><ul><li>Agent: <a href="https://js.langchain.com/docs/modules/agents/" target="_blank" rel="noreferrer">https://js.langchain.com/docs/modules/agents/</a></li><li>OpenAI API: <a href="https://platform.openai.com/docs/api-reference/introduction" target="_blank" rel="noreferrer">https://platform.openai.com/docs/api-reference/introduction</a></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/441e2e7cf89a4b90b15bc4eebb2d43bf~tplv-k3u1fbpfcp-watermark.image" alt="图片"></p><p>在这篇文章中，我们将探讨如何使用 GPT 来实现 LangChain 中的 Agent 概念。LangChain 是一个基于语言模型的编程框架，其中的 Agent、LLM 和 Tool 是其核心组件。我们将首先理解这些组件的概念和关系，然后设计一个状态机来描述 Agent 的工作流程，并使用 GPT 来实现 LLM 的功能。</p><h2 id="二、背景知识" tabindex="-1">二、<strong>背景知识</strong> <a class="header-anchor" href="#二、背景知识" aria-label="Permalink to &quot;二、**背景知识**&quot;">​</a></h2><p>首先，我们先来理解下什么是 <strong>Agent？一句话：AI 作为中间代理人，从而进行决策和执行。</strong></p><p><strong>举个场景</strong>：比如，你有一个应用，里面包含了<strong>计算服务</strong>、<strong>联网服务</strong>、<strong>天气服务</strong>，但是用户输入的格式是不确定的，我们往往需要根据用户的输入，从而去判断用户的一个意图，从而去调用对应服务，返回最终的结果。<strong>而 Agent 就可以直接帮你自动处理，你只需要告诉他，你的需求是什么，后续他会返回给你答案。</strong></p><p>LangChain 的 Agents 概念，就是针对于类似的场景，结合 LLM，可以自动帮你进行处理，需要走具体哪个服务，这个服务需要什么参数，从而给出对应的输出。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/1ed1aec2cee5407da90cf31369f874f3~tplv-k3u1fbpfcp-watermark.image" alt="Untitled 1.png"></p><p><strong>一句话</strong>：在 langChain 中 agent 做调用，llm 做决策，tools 做具体功能实现。</p><ul><li><strong>agent 做调用</strong>： 只起调用作用，调用 llm 得到决策，调用 tools 得到具体功能结果。</li><li><strong>llm 做决策</strong>：llm 做决策，根据 agent 提供的信息（用户输入和 tools），得到调用具体的 tool，以及具体给 tool 的传递的参数，这个决策给到 agent。</li><li><strong>tools 做具体功能实现</strong>：tool 做具体功能实现，如 weather tool 接受提供 weather 服务，search tool 提供搜索服务，并把结果返回给 Agent。</li></ul><p>好了，了解了 <strong>Agent</strong> 的概念，以及 GPT 的调用方法，我们就可以开始动手。</p><p>（Tip: 关于 GPT 的调用，可以参考 <a href="https://juejin.cn/post/7258337246024450103" target="_blank" rel="noreferrer">基于 OpenAI 的 API 快速搭建 ChaBot 🤖️</a>）</p><h2 id="三、整体思路" tabindex="-1">三、整体思路 <a class="header-anchor" href="#三、整体思路" aria-label="Permalink to &quot;三、整体思路&quot;">​</a></h2><p>实际上，我们本次就是实现上方这个图。主要实现三个模块吧。</p><ul><li><strong>Agent</strong>：Agent 是主导者，负责协调整个流程</li><li><strong>LLM</strong>：语言处理工具，负责处理语言相关的任务。</li><li><strong>Tools</strong>: Tools 是执行具体任务的工具或服务，提供了执行任务所需的功能和服务。</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/55cabd8c2dfc45a79ed4832fda94bffe%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 2.png"></p><p>然后我们对流程进行拆解，可以得到下方的表格，并且我们定义对应的状态机。</p><table><thead><tr><th>步骤名称</th><th>对应的状态机状态</th><th>设计模块</th><th>角色需要做的事情</th></tr></thead><tbody><tr><td>接收用户指令</td><td>INITIAL</td><td>Agent</td><td>接收并存储用户的指令</td></tr><tr><td>理解指令</td><td>CALL_LLM</td><td>LLM</td><td>解析用户的指令，生成行动计划</td></tr><tr><td>调用工具</td><td>CALL_TOOL</td><td>Agent, Tool</td><td>根据行动计划，选择并调用相应的工具</td></tr><tr><td>处理工具结果</td><td>PROCESS_RESULT</td><td>Agent, LLM</td><td>接收工具的结果，如果需要，再次调用 LLM 进行处理</td></tr><tr><td>输出结果</td><td>OUTPUT_RESULT</td><td>Agent</td><td>将最终的结果返回给用户</td></tr></tbody></table><p>对模块和流程，我们知道了，那么我们就具体来实现吧。</p><h2 id="四、具体实现" tabindex="-1">四、具体实现 <a class="header-anchor" href="#四、具体实现" aria-label="Permalink to &quot;四、具体实现&quot;">​</a></h2><p>这里我们主要从模块设计和流程设计两方面讲起。</p><h3 id="_4-1-模块设计" tabindex="-1">4.1 模块设计 <a class="header-anchor" href="#_4-1-模块设计" aria-label="Permalink to &quot;4.1 模块设计&quot;">​</a></h3><p><strong>Tool</strong></p><p>在 LangChain 中，工具（Tool）是具体执行任务的模块，它们为 Agent 提供了执行任务所需的功能和服务。每个工具都有一个特定的功能，例如查询天气、进行数学计算、搜索网页等。工具的设计目标是使其可以接受一个字符串参数并返回一个字符串结果，这样 Agent 就可以使用这个接口来调用各种工具。</p><p>为了实现这个目标，我们为工具设计了一个接口，该接口包含三个主要的属性：</p><ul><li><strong><code>name</code></strong>：工具的名称，用于在调用工具时进行识别。</li><li><strong><code>description</code></strong>：工具的描述，用于解释工具的功能和使用方法。</li><li><strong><code>call</code></strong>：工具的主要方法，接受一个字符串参数并返回一个字符串结果。</li></ul><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The name of the tool, used to identify it when the tool is invoked.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A description of the tool, explaining what the tool does and how to use it.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  call</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The main method of the tool, accepts a string parameter and returns a string result.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样的设计使得我们可以轻松地添加新的工具。只需要实现这个接口，就可以创建一个新的工具。然后，我们可以将这个工具添加到 Agent 的工具列表中，Agent 就可以在执行任务时调用这个工具。</p><p><strong>LLM</strong></p><p>在 LangChain 中，LLM 是一个语言模型，它可以理解用户的指令并生成相应的行动计划。LLM 的主要任务是解析用户的指令，确定下一步的动作，并生成相应的参数。</p><p>为了实现这个目标，我们使用 OpenAI 的 API 来实现 LLM 的功能。在调用 LLM 时，我们生成一个包含用户指令和工具信息的提示词，然后将其发送给 OpenAI 的 API。API 返回的结果是一个 JSON 字符串，包含下一步的动作和参数。</p><p>我们希望通过调用 llm 的 暴露的 api，然后得到一个动作和参数</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Configuration, ConfigurationParameters, OpenAIApi } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Tool } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./tool&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  openai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> understand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instruction, tools);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.openai.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createChatCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      response.data.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { action, params };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所以上方分三步：prompt 加工、GPT 调用、响应提取。</p><ul><li><p><strong>prompt 加工</strong>：这里主要是为了告诉 GPT 指令、目前工具集以及响应返回的格式。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  openai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> understand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 生成提示词</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果有结果，让 LLM 加工结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`You are a helpful assistant. The user says: &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instruction</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;. The result from the tool is: &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;. Based on the user&#39;s instruction and the tool&#39;s result, decide the next action. Your can processing result in params, but must respond with {&quot;action&quot;: &quot;output_result&quot;, &quot;params&quot;: {&quot;result&quot;: &quot;the final result&quot;}}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果没有结果，让 LLM 决定下一步动作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`You are a helpful assistant. You have the following tools at your disposal: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">toolInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}. The user says: &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instruction</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;. Based on the user&#39;s instruction and the tools available, decide the next action. If a tool should be used, respond with {&quot;action&quot;: &quot;call_tool&quot;, &quot;params&quot;: {&quot;toolName&quot;: &quot;the name of the tool&quot;, &quot;toolInput&quot;: &quot;the input for the tool&quot;}}. If the final result should be output, respond with {&quot;action&quot;: &quot;output_result&quot;, &quot;params&quot;: {&quot;result&quot;: &quot;the final result&quot;}}. Please note that the tool name should be one of the available tools and the tool input should be a valid input for that tool.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>GPT 调用</strong>：这里调用一下 GPT 提供的 API 就可以。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  openai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> understand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // other code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.openai.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createChatCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4-0613&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      messages: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          role: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          content: prompt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          role: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          content: instruction,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // other code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>响应提取：</strong> 得到的结果 JSON 字符串的格式如下, 我们提取对应的 <code>action</code> 和 <code>params</code> 就行了。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call_tool&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// action 表示行为 call_tool 为调用 tool，output_result 为输出结果。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;toolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weather_tool&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;toolInput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Beijing&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p><strong>Agent</strong></p><p>agent 做 llm 和 tool 的调用，并且将流程串起来，所以可以抽象为三个 API。</p><ul><li><strong>callLLM</strong>：调用 LLM 模型，让 LLM 给决策</li><li><strong>callTool</strong>：调用 TOOL 工具，得到具体 TOOL 的输出。</li><li><strong>processInstruction</strong>: 执行命令，串联流程，中间调用 LLM 和 TOOL。</li></ul><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgentState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  llm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">llm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INITIAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llm;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tools;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processInstruction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    toolName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    toolInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    toolName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    toolInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>好了，上方我们设计了 <code>tool</code> , <code>Agent</code>, <code>llm</code> 的模块设计，下方我们具体来看流程设计。</p><h3 id="_4-2-流程设计" tabindex="-1">4.2 流程设计 <a class="header-anchor" href="#_4-2-流程设计" aria-label="Permalink to &quot;4.2 流程设计&quot;">​</a></h3><p>上面讲到，流程设计主要是 <code>Agent</code> 中的 <code>processInstruction</code> 承接，然后我们之前也梳理了对应的<strong>步骤名称的状态机器和具体涉及模块。（下图），实际上，我们去进行实行就可以了。</strong></p><table><thead><tr><th>步骤名称</th><th>对应的状态机状态</th><th>设计模块</th><th>角色需要做的事情</th></tr></thead><tbody><tr><td>接收用户指令</td><td>INITIAL</td><td>Agent</td><td>接收并存储用户的指令</td></tr><tr><td>理解指令</td><td>CALL_LLM</td><td>LLM</td><td>解析用户的指令，生成行动计划</td></tr><tr><td>调用工具</td><td>CALL_TOOL</td><td>Agent, Tool</td><td>根据行动计划，选择并调用相应的工具</td></tr><tr><td>处理工具结果</td><td>PROCESS_RESULT</td><td>Agent, LLM</td><td>接收工具的结果，如果需要，再次调用 LLM 进行处理</td></tr><tr><td>输出结果</td><td>OUTPUT_RESULT</td><td>Agent</td><td>将最终的结果返回给用户</td></tr></tbody></table><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processInstruction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OUTPUT_RESULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HANDLE_ERROR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INITIAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CALL_LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CALL_LLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROCESS_RESULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            actionInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instruction, result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateStateBasedOnAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(actionInfo);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CALL_TOOL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(actionInfo.params);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROCESS_RESULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Invalid state, \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentState.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HANDLE_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;An error occurred.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-1-效果" tabindex="-1">5.1 效果 <a class="header-anchor" href="#_5-1-效果" aria-label="Permalink to &quot;5.1 效果&quot;">​</a></h2><p>下方我们已经实现了大体的一个代理，这个时候，我们加入日志功能就能从而来看具体效果吧。</p><p>下面举两个例子。</p><ul><li><strong>天气的例子</strong>： What is the weather in Shanghai?</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/bd6730e4f38e40929601f4d7d555ccc1%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 3.png"></p><ul><li><strong>计算例子</strong>：What is the result of 100 * 100 - 30?</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/08337c8b64eb4f8fb9358f83aed68ce8%7Etplv-k3u1fbpfcp-watermark.image" alt="Untitled 4.png"></p><p>上方两个例子，符合我们 Agent 的一个流程，我们也能看出他的决策流程。</p><h2 id="结论" tabindex="-1"><strong>结论</strong> <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;**结论**&quot;">​</a></h2><p>通过这个项目，我们成功地使用 <code>GPT</code> 实现了 <code>LangChain</code> 中的 <code>Agent</code> 概念。我们设计了一个状态机来描述 <code>Agent</code> 的工作流程。</p><p>总的来说，本文的代码不重要，我觉得 <code>Agent</code> 这个概念是更重要的。</p><p><code>Agent</code> 这个概念是非常强大和灵活的，它可以被看作是一个能够理解和执行用户指令的智能实体。在 LangChain 中，Agent 通过调用 LLM（Language Logic Model）和各种工具来完成用户的指令，这种设计使得 Agent 能够处理各种复杂的任务，并且可以通过添加新的工具来扩展其功能。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://chat.openai.com/?model=text-davinci-002-render-sha" target="_blank" rel="noreferrer">ChatGPT</a></li><li><a href="https://platform.openai.com/" target="_blank" rel="noreferrer">platform-openai</a></li><li><a href="https://js.langchain.com/docs/modules/agents/" target="_blank" rel="noreferrer">Agents-LangChain</a></li></ul><p><strong>完整代码</strong>：</p><ul><li><a href="https://github.com/hua-bang/AIGC/blob/master/creative/src/agent-demo/demo.ts" target="_blank" rel="noreferrer">Agent-Github</a></li></ul><p><strong>如果本文对你有一点点帮助或启发，希望可以点个赞哈 / 下方评论区评论 / 互关注 Github、公众号 学习交流，支持是创作的动力～</strong>。</p><ul><li><strong>公众号</strong>：华铧同学</li><li><strong>Github</strong>: <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fhua-bang" target="_blank" rel="noreferrer">github.com/hua-bang</a></li></ul>`,64)]))}const o=i(h,[["render",l]]);export{g as __pageData,o as default};
