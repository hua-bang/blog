import{_ as a,c as r,o as e,a1 as s}from"./chunks/framework.CfG-Evl9.js";const p=JSON.parse('{"title":"概述","description":"","frontmatter":{"title":"概述","customTag":"algorithms>数据结构","date":"2025.06.11","editLink":true},"headers":[],"relativePath":"algorithms/data-structure/index.md","filePath":"algorithms/data-structure/index.md","lastUpdated":1753108048000}'),o={name:"algorithms/data-structure/index.md"};function i(n,t,l,g,d,h){return e(),r("div",null,t[0]||(t[0]=[s('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><h2 id="数据结构分类" tabindex="-1">数据结构分类 <a class="header-anchor" href="#数据结构分类" aria-label="Permalink to &quot;数据结构分类&quot;">​</a></h2><p>常见的数据结构包括数组、链表、栈、队列、哈希表、图、树、堆，可以从“逻辑结构”和“物理结构”进行分类。</p><h3 id="逻辑结构-线性与非线性" tabindex="-1">逻辑结构：线性与非线性 <a class="header-anchor" href="#逻辑结构-线性与非线性" aria-label="Permalink to &quot;逻辑结构：线性与非线性&quot;">​</a></h3><p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。如</p><ul><li>在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；</li><li>而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；</li><li>图则由节点和边构成，反映了复杂的网络关系。</li></ul><p>可分为“线性”与“非线性”两部分。线性结构比较直观，指数据在逻辑关系上呈线性排列；非线性结构则相反，呈非线性排列。</p><ul><li><strong>线性数据结构</strong>：数组、链表、栈、队列，元素是一对一的顺序关系。</li><li><strong>非线性数据结构</strong>：树、堆、图、哈希表。</li></ul><p>非线性数据结构可以进一步划分为树形结构和网状结构。</p><ul><li><strong>树形结构</strong>：树、堆、哈希表，元素之间是一对多的关系。</li><li><strong>网状结构</strong>：图，元素之间是多对多的关系。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20250611082443.png" alt="image.png"></li></ul><h3 id="物理结构-连续与分散" tabindex="-1">物理结构：连续与分散 <a class="header-anchor" href="#物理结构-连续与分散" aria-label="Permalink to &quot;物理结构：连续与分散&quot;">​</a></h3><p><strong>物理结构反映了数据在计算机内存中的存储方式</strong>，可分为连续空间存储（数组）和分散空间存储（链表）。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20250611082517.png" alt="image.png"></p><p><strong>所有数据结构都是基于数组、链表或二者的组合实现的</strong></p><ul><li><strong>基于数组可实现</strong>：栈、队列、哈希表、树、堆、图、矩阵、张量（维度 ≥3 的数组）等。</li><li><strong>基于链表可实现</strong>：栈、队列、哈希表、树、堆、图等。</li></ul><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><p><strong>基本数据类型是 CPU 可以直接进行运算的类型</strong>，在算法中直接被使用，主要包括以下几种。</p><p>基本数据类型以二进制的形式存储在计算机中。一个二进制位即为 1 比特。在绝大多数现代操作系统中，1 字节（byte）由 8 比特（bit）组成。</p>',17)]))}const c=a(o,[["render",i]]);export{p as __pageData,c as default};
