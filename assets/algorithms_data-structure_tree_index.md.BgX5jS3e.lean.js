import{_ as r,c as e,o as a,a1 as i}from"./chunks/framework.Sf97EOBe.js";const E=JSON.parse('{"title":"概览","description":"","frontmatter":{"title":"概览","customTag":"algorithms>数据结构>树","date":"2024.04.01","editLink":true},"headers":[],"relativePath":"algorithms/data-structure/tree/index.md","filePath":"algorithms/data-structure/tree/index.md","lastUpdated":1753798949000}'),l={name:"algorithms/data-structure/tree/index.md"};function n(d,t,o,h,s,p){return a(),e("div",null,t[0]||(t[0]=[i('<h1 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h1><p>在計算機科學中，樹（英語：tree）是一种抽象数据类型（ADT）或是實作這種抽象数据类型的数据结构，用來模擬具有樹狀結構性質的数据集合。</p><p>它是由 n（n&gt;0）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p><ul><li>每个节点都只有有限个子节点或無子節點；</li><li>没有父节点的节点称为根节点；</li><li>每一个非根节点有且只有一个父节点；</li><li>除了根节点外，每个子节点可以分为多个不相交的子树；</li><li>樹裡面沒有環路(cycle)</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240317095423.png" alt="image.png"></p><h2 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h2><p>树的相关概念会比较多，用表格梳理如下。</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td><strong>节点的度</strong></td><td>一个节点含有的子树的个数称为该节点的度；</td></tr><tr><td><strong>树的度</strong></td><td>一棵树中，最大的节点度称为树的度；</td></tr><tr><td><strong>叶节点</strong>或<strong>终端节点</strong></td><td>度为零的节点</td></tr><tr><td><strong>分支节点</strong></td><td>度不为零的节点</td></tr><tr><td><strong>父节点</strong></td><td>若一个节点含有子节点，则这个节点称为其子节点的父节点；</td></tr><tr><td><strong>子节点</strong></td><td>一个节点含有的子树的根节点称为该节点的子节点；</td></tr><tr><td><strong>兄弟节点</strong></td><td>具有相同父节点的节点互称为兄弟节</td></tr><tr><td>节点的<strong>层次</strong></td><td>从根开始定义起，根为第 1 层，根的子节点为第 2 层，以此类推；</td></tr><tr><td><strong>深度</strong></td><td>对于任意节点 n,n 的深度为从根到 n 的唯一路径长，根的深度为 0；</td></tr><tr><td><strong>高度</strong></td><td>对于任意节点 n,n 的高度为从 n 到一片树叶的最长路径长，所有树叶的高度为 0；</td></tr></tbody></table><h2 id="树的种类" tabindex="-1">树的种类 <a class="header-anchor" href="#树的种类" aria-label="Permalink to &quot;树的种类&quot;">​</a></h2><p>树有很多中不同的形式，下方按照不同的维度来进行划分。</p><h3 id="有序-无序" tabindex="-1">有序/无序 <a class="header-anchor" href="#有序-无序" aria-label="Permalink to &quot;有序/无序&quot;">​</a></h3><ul><li>无序树：树中任意节点的子节点之间没有顺序关系，这种树称为无序树，也称为自由树。</li><li><a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%89%E5%BA%8F%E6%A0%91&amp;action=edit&amp;redlink=1" title="有序树（页面不存在）" target="_blank" rel="noreferrer">有序树</a>/<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E6%A0%91" title="搜索树" target="_blank" rel="noreferrer">搜索树</a>/查找树：树中任意节点的子节点之间有顺序关系，这种树称为有序树。即树的所有节点按照一定的顺序排列，这样进行插入、删除、查找时效率就会非常高</li></ul><h3 id="平衡" tabindex="-1">平衡/ <a class="header-anchor" href="#平衡" aria-label="Permalink to &quot;平衡/&quot;">​</a></h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91" title="平衡树" target="_blank" rel="noreferrer">平衡树</a><ul><li><a href="https://zh.wikipedia.org/w/index.php?title=%E7%BB%9D%E5%AF%B9%E5%B9%B3%E8%A1%A1%E6%A0%91&amp;action=edit&amp;redlink=1" title="绝对平衡树（页面不存在）" target="_blank" rel="noreferrer">绝对平衡树</a>：所有叶节点在同一层</li><li>非绝对平衡树</li></ul></li><li>不平衡树</li></ul><h3 id="节点的分叉情况" tabindex="-1">节点的分叉情况 <a class="header-anchor" href="#节点的分叉情况" aria-label="Permalink to &quot;节点的分叉情况&quot;">​</a></h3><ul><li>等叉树：是每个节点的键值个数都相同、子节点个数也都相同 <ul><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" title="二叉树" target="_blank" rel="noreferrer">二叉树</a>：每个节点最多含有两个子树的树称为二叉树； <ul><li><a href="https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91" title="完全二叉树" target="_blank" rel="noreferrer">完全二叉树</a>：对于一棵二叉树，假设其深度为 d（d&gt;1）。除了第 d 层外，其它各层的节点数目均已达最大值，且第 d 层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树； <ul><li><a href="https://zh.wikipedia.org/wiki/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91" title="满二叉树" target="_blank" rel="noreferrer">满二叉树</a>：所有叶节点都在最底层的完全二叉树；</li></ul></li><li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91" title="平衡二叉树" target="_blank" rel="noreferrer">平衡二叉树</a>（<a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" title="AVL树" target="_blank" rel="noreferrer">AVL 树</a>）：当且仅当任何节点的两棵子树的高度差不大于 1 的二叉树；</li><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%85%83%E6%A8%B9" title="排序二元樹" target="_blank" rel="noreferrer">排序二叉树</a>：也称二叉查找树、二叉搜索树、有序二叉树；</li></ul></li><li><a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91" title="霍夫曼树" target="_blank" rel="noreferrer">霍夫曼树</a>：<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B8%A6%E6%9D%83%E8%B7%AF%E5%BE%84&amp;action=edit&amp;redlink=1" title="带权路径（页面不存在）" target="_blank" rel="noreferrer">带权路径</a>最短的二叉树称为哈夫曼树或最优二叉树；</li><li><a href="https://zh.wikipedia.org/w/index.php?title=%E5%A4%9A%E5%8F%89%E6%A0%91&amp;action=edit&amp;redlink=1" target="_blank" rel="noreferrer">多叉树</a></li></ul></li><li>不等叉树：每个节点的键值个数不一定相同、子节点个数也不一定相同 <ul><li><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91" title="B树" target="_blank" rel="noreferrer">B 树</a>：对不等叉树的节点键值数和插入、删除逻辑添加一些特殊的要求，使其能达到绝对平衡的效果。B 树全称 Balance Tree。如果某个 B 树上所有节点的分叉数最大值是 m，则把这个 B 数叫做 m 阶 B 树。</li></ul></li></ul>',16)]))}const k=r(l,[["render",n]]);export{E as __pageData,k as default};
