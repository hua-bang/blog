import{_ as t,o as a,c as r,Q as e}from"./chunks/framework.71c8f1eb.js";const u=JSON.parse('{"title":"Algorithms 📚","description":"","frontmatter":{},"headers":[],"relativePath":"algorithms/index.md","filePath":"algorithms/index.md","lastUpdated":1711327962000}'),o={name:"algorithms/index.md"},s=e('<h1 id="algorithms-📚" tabindex="-1">Algorithms 📚 <a class="header-anchor" href="#algorithms-📚" aria-label="Permalink to &quot;Algorithms 📚&quot;">​</a></h1><p>Data Structure and Algorithms</p><h2 id="data-structure" tabindex="-1">Data Structure <a class="header-anchor" href="#data-structure" aria-label="Permalink to &quot;Data Structure&quot;">​</a></h2><p>数据结构是计算机中组织和存储数据的一种特殊方式，使得数据可以被高效修改和访问。</p><p>数据结构的主要作用包括：</p><ul><li><strong>组织数据</strong>：帮助我们以有逻辑的方式组织数据。</li><li><strong>提高效率</strong>：使数据的访问、插入和删除操作更加高效。</li><li><strong>管理程序的内存使用</strong>：高效的数据结构可以帮助节省内存空间，提升程序性能。</li></ul><p>常见的数据结构包括数组、链表、栈、队列、哈希表、堆、图、树等。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240305223816.png" alt="image.png"></p><h2 id="algorithms" tabindex="-1">Algorithms <a class="header-anchor" href="#algorithms" aria-label="Permalink to &quot;Algorithms&quot;">​</a></h2><p>算法是完成特定任务或解决问题步骤的有限序列。它是一组定义清晰的指令集，用于从一组输入值中产生输出并结束于一个预定义的结束状态。</p><p>算法的主要作用包括：</p><ul><li><strong>解决问题</strong>：算法提供了解决问题的方法和步骤。</li><li><strong>提高效率</strong>：通过优化算法来提高解决问题的速度和效率。</li><li><strong>可复用性</strong>：设计良好的算法可以在不同的程序和应用中重复使用。</li></ul><p>算法的效率通常通过时间复杂度和空间复杂度来衡量，这两者分别描述了算法运行所需的时间和空间资源。</p>',13),i=[s];function l(n,h,c,g,d,p){return a(),r("div",null,i)}const _=t(o,[["render",l]]);export{u as __pageData,_ as default};
