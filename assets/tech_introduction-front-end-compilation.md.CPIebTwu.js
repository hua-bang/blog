import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.47i9LX9H.js";const y=JSON.parse('{"title":"初识前端编译及 Babel","description":"","frontmatter":{"title":"初识前端编译及 Babel","customTag":"tech>编译","date":"2023.11.02"},"headers":[],"relativePath":"tech/introduction-front-end-compilation.md","filePath":"tech/introduction-front-end-compilation.md","lastUpdated":1716341070000}'),t={name:"tech/introduction-front-end-compilation.md"},l=n(`<h1 id="初识前端编译及-babel" tabindex="-1">初识前端编译及 Babel <a class="header-anchor" href="#初识前端编译及-babel" aria-label="Permalink to &quot;初识前端编译及 Babel&quot;">​</a></h1><p>本文主要从个人对前端编译的了解，对前端编译的一些进行思考。会讲解编译的大致流程，以及前端的常用工具 Babel，但不会细节到具体某个环节。</p><h2 id="_1-引言" tabindex="-1"><strong>1. 引言</strong> <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;**1. 引言**&quot;">​</a></h2><p>编译在前端开发中的重要性逐渐增加，特别是随着<strong>现代前端框架、ES6+， TypeScript</strong> 的普及。本文旨在为开发者提供一个比较简单的前端编译的知识输入，主要讲解编译的基本概念以及让大家对编译有所体感。</p><h2 id="_2-什么是编译" tabindex="-1"><strong>2. 什么是编译</strong> <a class="header-anchor" href="#_2-什么是编译" aria-label="Permalink to &quot;**2. 什么是编译**&quot;">​</a></h2><p><strong>编译是将源代码从一种编程语言转换为另一种编程语言的过程</strong>。</p><p>简单来说，它通常是将高级语言转换为低级语言（如汇编或机器代码）。与解释不同，编译是在代码运行之前完成的。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924231818.png" alt="image.png"></p><h3 id="前端常见的编译工具" tabindex="-1"><strong>前端常见的编译工具</strong> <a class="header-anchor" href="#前端常见的编译工具" aria-label="Permalink to &quot;**前端常见的编译工具**&quot;">​</a></h3><p>前端编译例子：TS 转 JS、JSX 转 JS、Vue Template 转 JS，对应的编译工具有。</p><ul><li><strong>Babel</strong>：主要用于将 ES6+代码转换为向后兼容的 JavaScript 版本。</li><li><strong>TSC</strong>：JavaScript 的超集，添加了类型系统。</li><li><strong>Vue-Compiler</strong>: 支持 Vue 的语法，最终转成 JS、css 代码。</li><li><strong>小程序</strong>：小程序的设计，天然就决定了他的编译特性，跨端运行。</li><li><strong>Compiler-NG</strong>: 内部对于 Lynx 语法的编译器，将类 react 语法转成一个二进制的 JS 产物。</li></ul><p>虽然前端用了这么多编译工具，但这些对于我们来说，可能还是会相对比较陌生。</p><p>因为在我们日常开发中，可能我们更多注重接触的是运行时的代码，而一般不会接触到工程层的设计，所以可能对基建工具层不够熟悉。</p><p>但其实了解编译的话，会对我们日常开发，也是会有很大帮助的。</p><h2 id="_3-编译流程" tabindex="-1">3. <strong>编译流程</strong> <a class="header-anchor" href="#_3-编译流程" aria-label="Permalink to &quot;3. **编译流程**&quot;">​</a></h2><p>编译一般包括以下几个步骤：</p><ul><li><strong>Parse:</strong> 通过 <code>parser</code> 将源代码转换成<strong>抽象语法树(AST),</strong> 其中会涉及到 <strong>词法解析，语法解析</strong>等操作。</li><li><strong>Transform：</strong> 拿到了源码上对应的 <code>AST</code>, 我们可以去对这个<code>AST</code>, 进行增删改查的操作。其中会涉及到访问者模式的知识。</li><li><strong>Generate：</strong> 转换后的 <code>AST</code>，我们可以转换生成目标代码。</li></ul><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924231840.png" alt="image.png"></p><p>上方只是简单说了下编译的流程，下方我们对流程进行细化。</p><p><a href="https://astexplorer.net/#/gist/c98a65c37b72bec5dfd215ac981a3ad4/140607ab8205b758cd42aae9399a8e86d4519a55" target="_blank" rel="noreferrer">https://astexplorer.net/#/gist/c98a65c37b72bec5dfd215ac981a3ad4/140607ab8205b758cd42aae9399a8e86d4519a55</a></p><h3 id="_3-1-parse" tabindex="-1">3.1 Parse <a class="header-anchor" href="#_3-1-parse" aria-label="Permalink to &quot;3.1 Parse&quot;">​</a></h3><blockquote><p>Parse 阶段是将源码字符串转换成机器能够理解的 AST，这个过程分成此词法分析，语法分析。</p></blockquote><p><strong>词法分析</strong>：将字符串分成一个个规定好的 <code>token</code>，分割的工具我们一般成为词法分析器(<code>Tokenizer</code>)。</p><p><strong>语法分析：</strong> 将一个个 <code>token</code> 进行拼接组装，按照不同的语法结构，来把一堆堆 <code>token</code> 进行组合拼接，生成 <code>AST</code> ，声明语句，赋值表达式都有对应的 <code>AST</code> 节点。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232000.png" alt="image.png"></p><h3 id="_3-2-transform" tabindex="-1">3.2 Transform <a class="header-anchor" href="#_3-2-transform" aria-label="Permalink to &quot;3.2 Transform&quot;">​</a></h3><blockquote><p>Transform 主要是对生成的 AST 进行处理，会进行 AST 的遍历，可以对对应的 AST 节点进行处理。</p></blockquote><p>下方是一个在 log 函数添加新的参数节点的示意图，注意，这里只是表达添加参数节点，并不代表实际节点这么使用。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232013.png" alt="image.png"></p><h3 id="_3-3-generate" tabindex="-1">3.3 Generate <a class="header-anchor" href="#_3-3-generate" aria-label="Permalink to &quot;3.3 Generate&quot;">​</a></h3><blockquote><p>Generate 阶段会根据 AST 生成新的字符串，并生成对应的 SourceMap。</p></blockquote><p>不同的 AST 对应的不同结构的字符串。比如 <code>VariableDeclaration</code> 就可以打印成 <code>const</code> 格式的代码。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232046.png" alt="image.png"></p><p>以上是编译的抽象的流程。而前端工程中，其实也是在打包的过程去加入了编译的这样的一个环节。</p><p>下方，我们就来讲讲其中用的比较多的打包工具 —— babel</p><h2 id="_4-babel-a-javascript-compiler" tabindex="-1"><strong>4. Babel: A JavaScript Compiler</strong> <a class="header-anchor" href="#_4-babel-a-javascript-compiler" aria-label="Permalink to &quot;**4. Babel: A JavaScript Compiler**&quot;">​</a></h2><p><code>Babel</code> 实质上是一个 <code>JavaScript</code> 的编译器（转译器），用于将 <code>es next</code>, <code>typescript</code> 等代码做相关的转换，同时暴露了相关的 <code>api</code> 给开发者做特定用途的转换。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232058.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232110.png" alt="image.png"></p><h3 id="_4-1-babel-执行流程" tabindex="-1">4.1 Babel 执行流程 <a class="header-anchor" href="#_4-1-babel-执行流程" aria-label="Permalink to &quot;4.1 Babel 执行流程&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232220.png" alt="image.png"></p><p>refer: <a href="https://juejin.cn/post/6844903956905197576#heading-7" target="_blank" rel="noreferrer">*<strong>*深入浅出 Babel 上篇：架构和原理 + 实战**</strong></a></p><p>babel 的执行过程从大体来看，和我们上方的流程是一致的。但 babel 在具体实现的细节中，有很多很棒的技术设计。</p><p>如<strong>核心流程拆包、插件生态、访问者模式。</strong></p><h3 id="_4-2-核心流程拆包" tabindex="-1">4.2 *<strong>*核心流程拆包**</strong> <a class="header-anchor" href="#_4-2-核心流程拆包" aria-label="Permalink to &quot;4.2 \\***\\*核心流程拆包\\*\\***&quot;">​</a></h3><p>babel 讲流程拆的很细, 并且每个包都符合单一职责的设计。</p><ul><li><strong>核心</strong>： <ul><li><strong><code>@babel/core</code>:</strong> 整体流程的内核，加载配置和插件，调用 parser, traverser, generator 的流程调用。</li></ul></li><li><strong>核心能力支撑:</strong><ul><li>**<code>@babel/parser</code>：**负责 源代码进行解析，解析成 AST。它已经内置支持很多语法. 例如 JSX、Typescript、Flow、以及最新的 ECMAScript 规范。</li><li><strong><code>@babel/traverse</code> :</strong> 实现了<code>访问者模式</code>，对 AST 进行遍历，可以对节点进行 patch。</li><li><strong><code>@babel/generator</code> :</strong> 将 AST 转换为源代码，支持 SourceMap。</li></ul></li></ul><h3 id="_4-3-插件生态" tabindex="-1">4.3 <strong>插件生态</strong> <a class="header-anchor" href="#_4-3-插件生态" aria-label="Permalink to &quot;4.3 **插件生态**&quot;">​</a></h3><ul><li><strong>插件</strong>： <ul><li><strong>语法插件(<code>@babel/plugin-syntax-*</code>)</strong>：上面说了 <code>@babel/parser</code> 已经支持了很多 JavaScript 语法特性，Parser 也不支持扩展. <strong>因此<code>plugin-syntax-*</code>实际上只是用于开启或者配置 Parser 的某个功能特性</strong>。</li><li><strong>转换插件</strong>： 用于对 AST 进行转换, 实现转换为 ES5 代码、压缩、功能增强等目的.</li><li><strong>预定义集合(<code>@babel/presets-*</code>)</strong>： 插件集合或者分组，主要方便用户对插件进行管理和使用。比如<code>preset-env</code>含括所有的标准的最新特性; 再比如<code>preset-react</code>含括所有 react 相关的插件.</li></ul></li><li><strong>插件开发辅助：</strong><ul><li><code>@babel/template</code>： 某些场景直接操作 AST 太麻烦，就比如我们直接操作 DOM 一样，所以 Babel 实现了这么一个简单的模板引擎，可以将字符串代码转换为 AST。比如在生成一些辅助代码(helper)时会用到这个库。</li><li><code>@babel/types</code>： AST 节点构造器和断言. 插件开发时使用很频繁。</li><li><code>@babel/helper</code>： 辅助代码，单纯的语法转换可能无法让代码运行起来，比如低版本浏览器无法识别 class 关键字，这时候需要添加辅助代码，对 class 进行模拟。</li></ul></li><li><strong>工具</strong>： <ul><li><code>@babel/cli</code>： CLI 工具</li><li><code>@babel/node</code>： Node.js CLI, 通过它直接运行需要 Babel 处理的 JavaScript 文件</li></ul></li></ul><h3 id="_4-4-访问者模式" tabindex="-1">4.4 <strong>访问者模式</strong> <a class="header-anchor" href="#_4-4-访问者模式" aria-label="Permalink to &quot;4.4 **访问者模式**&quot;">​</a></h3><p>// 看看写不写</p><h2 id="_5-简单的写一个-babel-插件" tabindex="-1">5.简单的写一个 Babel 插件 <a class="header-anchor" href="#_5-简单的写一个-babel-插件" aria-label="Permalink to &quot;5.简单的写一个 Babel 插件&quot;">​</a></h2><blockquote><p>整体会使用 vite + react 来实现。</p></blockquote><h3 id="_5-1-需求" tabindex="-1"><strong>5.1 需求</strong> <a class="header-anchor" href="#_5-1-需求" aria-label="Permalink to &quot;**5.1 需求**&quot;">​</a></h3><p>埋点，可以理解为针对用户的特定行为，进行一个记录，处理和发送相关事件以及对应的数据的技术。</p><p>我们这里做一个简单的案例，我们只需要在对应的 DOM 节点打上标识，然后当点击对应的 DOM 节点的时候，能够进行埋点数据的上报。</p><h3 id="_5-2-思路" tabindex="-1"><strong>5.2 思路</strong> <a class="header-anchor" href="#_5-2-思路" aria-label="Permalink to &quot;**5.2 思路**&quot;">​</a></h3><p>于是，我们的思路比较明确，主要是以下两点</p><ul><li><strong>修改代码的时机</strong>：在对应的打包工具中，看编译过程中的生命周期钩子，在对应生命周期中，修改代码。(如 vite 中的  <code>transform</code>  钩子)</li><li><strong>具体如何修改代码</strong>：我们可以借助 babel 来进行一层代码的转译。分为  <strong>引入 SDK</strong>  以及  <strong>添加编译事件</strong>。</li></ul><h3 id="_5-3-实现" tabindex="-1"><strong>5.3 实现</strong> <a class="header-anchor" href="#_5-3-实现" aria-label="Permalink to &quot;**5.3 实现**&quot;">​</a></h3><p><strong>修改代码的时机</strong></p><p>这里其实涉及两点。</p><ul><li><strong>打包工具提供的钩子</strong>：vite 提供了 transform 钩子，我们可以直接用，但其他打包工具的具体看提供的钩子。</li><li><strong>编译插件调用顺序</strong>：项目中一般也存在其他的编译插件，我们要注意执行顺序，不要产生冲突（如我们的插件应该是 在 tsx/jsx 进行编译，而不是在他转成 js 的时候进行编译）。</li></ul><p>我们使用 vite 的 transform 钩子。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@babel/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoTrackerBabelPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./babel-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoTrackerPluginOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  libPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(tsx)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autoTracker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pluginOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoTrackerPluginOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoTracker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enforce: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fileRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transformAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        babelrc: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        configFile: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ast: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parserOpts: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugins: [[autoTrackerBabelPlugin, pluginOptions]],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: result.code,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        map: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>babel 代码编译</strong></p><p><code>babel</code> 这里主要注意两点</p><ul><li><strong>SDK 引入</strong>：我们看对应的文件，之前有没有引入 SDK，没有的话，我们手动引入一下。</li></ul><p>代码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkHasLogIdentification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data-log-params&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAttributeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">libName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">libPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoTrackerPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    visitor: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> needImportSDK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loggerId;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里从 Program 节点进行遍历, 主要两个功能        // 1. 判断该组件下的 是否需要引入 SDK。        // 2. 判断 SDK 是否导入，导入记录下 loggerId。        path.traverse({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          JSXOpeningElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elePath) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elePath.node;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasLogIdentification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkHasLogIdentification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              attributes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hasLogIdentification) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              needImportSDK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              elePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ImportDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(importPath) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> importPath;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node.source.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libPath)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> specifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.specifiers[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isImportDefaultSpecifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(specifier)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                importPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                needImportSDK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              loggerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> specifier.local.name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取出导入的变量名赋值给loggerId              importPath.stop();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              state.loggerNodeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loggerId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (!</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">needImportSDK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (!</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">loggerId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 如果loggerId没有值，说明源代码中还没有导入此模块，          loggerId = path.scope.generateUid(libName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          path.node.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              [t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importDefaultSpecifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggerId))],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringLiteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libPath),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          state.loggerNodeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loggerId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>代码编译</strong>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkHasLogIdentification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;data-log-params&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAttributeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">libName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">libPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoTrackerPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    visitor: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      JSXOpeningElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.loggerNodeName) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.node;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasLogIdentification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkHasLogIdentification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attributes);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hasLogIdentification) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> onClickNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAttributeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(attributes, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onClickNode) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;attributes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsxAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsxIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsxExpressionContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loggerNodeName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.reportClick\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onClickNode;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onClickFNNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newTapFNNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memberExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memberExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.loggerNodeName),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;generateReportClickFn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              [t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thisExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [onClickFNNode]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          onClickNode.value.expression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTapFNNode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-4-效果" tabindex="-1"><strong>5.4 效果</strong> <a class="header-anchor" href="#_5-4-效果" aria-label="Permalink to &quot;**5.4 效果**&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20230924232152.png" alt="image.png"></p><h2 id="_6-结尾" tabindex="-1">6. 结尾 <a class="header-anchor" href="#_6-结尾" aria-label="Permalink to &quot;6. 结尾&quot;">​</a></h2><p>上方简单的介绍了个人视角下的前端编译流程以及对 babel 的理解，也许部分内容存在部分错误，也请批评指正。</p><p>编译在前端开发中扮演着越来越重要的角色，特别是在现代 Web 应用的构建中。掌握基础的编译原理和工具使用是每个前端开发者的必备技能。</p><p>具体表现在</p><ul><li>不同的框架的不同语法，Vue, React 等。</li><li>自定义语法支持，比如公司内部的 Lynx， 同时 Lynx 有多套编译器。</li><li>越来越多的打包工具的诞生，从编译角度讲，rust、 go 编译的性能会比 JS 编译的性能高。</li></ul><p>未来，随着 WebAssembly、工具链新技术的出现，前端编译可能会有更多的应用场景和发展趋势。</p><h2 id="参考链接" tabindex="-1"><strong>参考链接</strong> <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;**参考链接**&quot;">​</a></h2><ul><li>*<strong>*深入浅出 Babel 上篇：架构和原理 + 实战:**</strong> <a href="https://juejin.cn/post/6844903956905197576" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903956905197576</a></li><li>Babel 官网: **<a href="https://babeljs.io/**" target="_blank" rel="noreferrer">https://babeljs.io/**</a></li><li>Webpack 官网: **<a href="https://webpack.js.org/**" target="_blank" rel="noreferrer">https://webpack.js.org/**</a></li><li>TypeScript 官网: **<a href="https://www.typescriptlang.org/**" target="_blank" rel="noreferrer">https://www.typescriptlang.org/**</a></li><li>编译器原理基础: **<a href="https://en.wikipedia.org/wiki/Compiler**" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Compiler**</a></li></ul>`,82),h=[l];function p(k,e,E,r,g,d){return a(),i("div",null,h)}const c=s(t,[["render",p]]);export{y as __pageData,c as default};
