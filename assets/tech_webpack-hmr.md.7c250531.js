import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.71c8f1eb.js";const h=JSON.parse('{"title":"webpack 中的 HMR","description":"","frontmatter":{"title":"webpack 中的 HMR","customTag":"tech>Frontend Engineer","editLink":true},"headers":[],"relativePath":"tech/webpack-hmr.md","filePath":"tech/webpack-hmr.md","lastUpdated":1710772940000}'),e={name:"tech/webpack-hmr.md"},l=n(`<h1 id="webpack-中的-hmr" tabindex="-1">Webpack 中的 HMR <a class="header-anchor" href="#webpack-中的-hmr" aria-label="Permalink to &quot;Webpack 中的 HMR&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#一、背景">一、背景</a></li><li><a href="#二、流程图解">二、流程图解</a><ul><li><a href="#初始化阶段">初始化阶段</a></li><li><a href="#文件更新时">文件更新时</a></li><li><a href="#热更新应用时">热更新应用时</a></li></ul></li><li><a href="#三、-webpack-项目中的-hmr">三、 Webpack 项目中的 HMR</a><ul><li><a href="#_3-1-初始化项目">3.1 初始化项目</a></li><li><a href="#_3-2-热更新能力的开启">3.2 热更新能力的开启</a></li><li><a href="#_3-3-具体看源码">3.3 具体看源码</a></li></ul></li><li><a href="#参考资料">参考资料</a></li></ul></nav><h2 id="一、背景" tabindex="-1">一、背景 <a class="header-anchor" href="#一、背景" aria-label="Permalink to &quot;一、背景&quot;">​</a></h2><blockquote><p><a href="https://webpack.js.org/concepts/hot-module-replacement" target="_blank" rel="noreferrer">Webpack HMR</a></p></blockquote><p><code>Hot Module Replacement</code>，也称为 <code>HMR</code>，是一种在应用程序运行时替换、添加或删除模块的技术，无需完全刷新页面就能更新这些模块。</p><ul><li>修改 <code>JS</code> 文件，无需刷新页面，而能够直接在页面进行代码更新。</li><li>修改 <code>CSS</code> 文件，无需刷新页面，改动的样式能直接呈现。</li></ul><p>这极大的提高了，前端开发者的开发效率。</p><p>目前，我们可能对 <code>HMR</code> 没有太多的体感，毕竟前端工具链层面已经做了 <code>HMR</code> 集成了，开发者无需感知里面的 <code>HMR</code> 流程和细节，只用享受 <code>HMR</code> 带来的便利。故 <code>HMR</code> 对大部分开发者来说，是比较黑盒的。</p><p>本文旨在了解 <code>HMR</code> 的流程，以及用一个具体的场景（ <code>webpack</code> ）来看 <code>HMR</code> 是如何具体使用的。</p><h2 id="二、流程图解" tabindex="-1">二、流程图解 <a class="header-anchor" href="#二、流程图解" aria-label="Permalink to &quot;二、流程图解&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223223.png" alt=""></p><h3 id="初始化阶段" tabindex="-1"><strong>初始化阶段</strong> <a class="header-anchor" href="#初始化阶段" aria-label="Permalink to &quot;**初始化阶段**&quot;">​</a></h3><p>项目启动后，本地会开启一个服务（ <code>Dev Server</code> ），同时 <code>Browser</code> 侧会注入 <code>HMR Runtime</code> 的一些代码，使得两方都可以在后续流程用到 <code>HMR</code> 的能力。并且在初始化过程中，他们会建立一个 <code>WebSocket</code> 的链接，支持后续的双向通信。</p><ul><li><strong><code>Dev Server</code> 侧</strong>： <code>Dev Server</code> 中可以调用 <code>HMR</code>，提供的能力，我们称它为 HMR Server。</li><li><strong><code>Browser</code> 侧</strong>: 注意，这里的 <code>browser</code> 侧的话，不仅仅只有 <code>bundler</code> 编译过后我们原来的代码， <code>HMR</code> 工具需要注入一些代码到 <code>browser</code> 和我们具体的代码之中，才能保证 <code>HMR</code> 热更新生效。</li></ul><h3 id="文件更新时" tabindex="-1">文件更新时 <a class="header-anchor" href="#文件更新时" aria-label="Permalink to &quot;文件更新时&quot;">​</a></h3><p>当项目文件更新的时候， <code>bundler</code> 会进行一次重新打包。这个时候 <code>HMR Server</code> 会计算出修改的文件，并封装成约定好的数据结构，通过 <code>WebSocket</code>，给到 <code>HMR Runtime</code>， 而这个时候 <code>HMR Runtime</code> 会通知需要修改的模块来进行更新。</p><h3 id="热更新应用时" tabindex="-1"><strong>热更新应用时</strong> <a class="header-anchor" href="#热更新应用时" aria-label="Permalink to &quot;**热更新应用时**&quot;">​</a></h3><ul><li>在浏览器端， <code>HMR Runtime</code> 负责具体的更新流程，这包括请求新模块代码，以及在其载入后，更新模块实例或状态。</li><li>如果模块可以被热更新，这个过程就会发生，否则可能需要回退到完整的页面刷新。</li></ul><p>上方仅仅是一种 <code>HMR</code> 能力实现的思路，但还是不够有体感，接着我们具体用 <code>Webpack</code> 的例子来做解释，希望能够带来更多的体感从而加深理解。</p><h2 id="三、-webpack-项目中的-hmr" tabindex="-1">三、 <code>Webpack</code> 项目中的 <code>HMR</code> <a class="header-anchor" href="#三、-webpack-项目中的-hmr" aria-label="Permalink to &quot;三、 \`Webpack\` 项目中的 \`HMR\`&quot;">​</a></h2><p>下面，我们从一个简单的例子，来看 <code>Webpack</code> 项目中的热更新流程。</p><h3 id="_3-1-初始化项目" tabindex="-1">3.1 初始化项目 <a class="header-anchor" href="#_3-1-初始化项目" aria-label="Permalink to &quot;3.1 初始化项目&quot;">​</a></h3><p>首先，我们来进行一个简单的 <code>Webpack</code> 项目的搭建。</p><p><code>hello.js</code></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;div&gt;hello, HMR&lt;/div&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> getHello;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  document.body.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;div&gt;hello, HMR&lt;/div&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> getHello;</span></span></code></pre></div><p><code>index.js</code></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> getHello </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">getHello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> getHello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getHello</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>webpack.config.js</code> 配置</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;html-webpack-plugin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hmr&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack.config.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack serve&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;echo </span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">Error: no test specified\\\\</span><span style="color:#9ECBFF;">&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;license&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ISC&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;webpack&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^5.90.3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;devDependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^5.6.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;webpack-cli&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^5.1.4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;webpack-dev-server&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^5.0.3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hmr&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack.config.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack serve&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;echo </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">Error: no test specified\\\\</span><span style="color:#032F62;">&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;license&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ISC&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;webpack&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^5.90.3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;devDependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;html-webpack-plugin&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^5.6.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;webpack-cli&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^5.1.4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;webpack-dev-server&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^5.0.3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们使用 <code>npm run dev</code> 的时候，我们看到了效果。 <img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223305.png" alt="image.png"></p><h3 id="_3-2-热更新能力的开启" tabindex="-1">3.2 热更新能力的开启 <a class="header-anchor" href="#_3-2-热更新能力的开启" aria-label="Permalink to &quot;3.2 热更新能力的开启&quot;">​</a></h3><p>我们根据 <a href="https://webpack.js.org/guides/hot-module-replacement#enabling-hmr" target="_blank" rel="noreferrer">HMR 配置</a>, 进行了下方的配置。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hot: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;html-webpack-plugin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    hot: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这个时候我们对 <code>hello.js</code> 进行如下修改，理论上，不出意外的话，页面会进行局部的更新。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;div&gt;hello, HMR!!!&lt;/div&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> getHello;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  document.body.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;div&gt;hello, HMR!!!&lt;/div&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> getHello;</span></span></code></pre></div><p>但还是出现了预期之外的事。</p><p><strong>表现</strong>：页面确实是更新了，但这是因为网页进行了更新。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223330.png" alt="image.png"></p><p>这可能会和我们的直觉不太一样，毕竟我们日常在项目中使用热更新的话，理论上是局部刷新。</p><p>实际上， <code>webpack</code> 中配置了 <code>devServer.hot=true</code> 的时候，只是给我们提供了 <code>HMR</code> 的 <code>API</code> 能力，但具体如何调用 <code>HMR</code> 做模块的替换，这个需要外部自己实现。</p><p>而日常的时候，是因为有其他插件帮我们做了这件事，如 <code>vue-loader</code> 、 <code>react-hot-loader</code> , 所以我们没有感知。</p><p>这个时候我们根据 <a href="https://webpack.js.org/guides/hot-module-replacement#enabling-hmr" target="_blank" rel="noreferrer">HMR 配置</a> 也写一个例子吧。</p><p>修改 <code>index.js</code> 代码</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> getHello </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">getHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">], () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hmr&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> getHello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getHello</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">], () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hmr&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getHello</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>表现</strong>：这时候可以看到热更新的效果已经出来了，</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223410.png" alt="image.png"></p><p>同时，还能看到在浏览器侧，注入了一个 <a href="http://module.hot" target="_blank" rel="noreferrer">module.hot</a> 的变量。并且，我们的代码中还是用到了 module.hot 的 api 来实现热更新。</p><p>于是，引出了下方几个问题。</p><ol><li><a href="http://module.hot" target="_blank" rel="noreferrer">module.hot</a> 什么时候被注入的，为什么需要进行注入。</li><li>如果需要 <a href="http://module.hot" target="_blank" rel="noreferrer">module.hot</a> 的 api，我们需要去在代码文件中，写入 <code>module.hot</code> ,这个成本是十分高的，我们如何去除这个成本。</li></ol><h3 id="_3-3-具体看源码" tabindex="-1">3.3 具体看源码 <a class="header-anchor" href="#_3-3-具体看源码" aria-label="Permalink to &quot;3.3 具体看源码&quot;">​</a></h3><p>我们根据 <code>package.json</code> 中的 <code>dev</code> 命令具体看看流程。</p><p>注意：由于文章篇幅和重点内容在于 <code>HMR</code>，只会专门描述 <code>HMR</code> 相关的知识点。其他的会进行一定的省略。</p><ol><li>webpack <code>server</code> 命令。</li></ol><blockquote><p><a href="https://github.com/webpack/webpack-cli/blob/e07f0e58df103011435524d757102534b75a6796/packages/webpack-cli/src/webpack-cli.ts#L1282" target="_blank" rel="noreferrer">webnpackCli.run</a></p></blockquote><p>根据执行了 <code>server</code> 命令，则会有如下的调用顺序。</p><p><code>webpackCli.run()</code> → <code>@webpack-cli/server 的 server 实例</code> → <code>WepackDevServer 中 DevServer.start()</code></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223438.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223457.png" alt="image.png"></p><p>从上方来看， <code>webpack server</code> 最终会执行到 <code>WebpackDevServer</code> 中的 <code>start</code> 函数。</p><p>我们具体看看 <code>start</code> 函数做了啥。</p><ol start="2"><li><code>WebpackDevServer</code> 中的 <code>start</code> 函数流程。</li></ol><p>我们可以看到， <code>start</code> 函数中做了配置的适配，和初始化，同时还开启了一个 <code>websocket</code> 的链接（以方便 Server 和 Client 作为通信）。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223555.png" alt="image.png"></p><p>同时，初始化过程修改入口文件，进行一些 <code>HMR</code> 的代码注入（entry 加入了 <code>webpack-dev-server/client</code> 和 <code>webpack/hot/dev-server.js</code>）。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223628.png" alt="image.png"></p><p>同时，还自动注入了 <code>webpack.HotModuleReplacementPlugin</code> 的插件。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223647.png" alt="image.png"></p><p>同时，这里还注册了 <code>Webpack</code> 的插件，利用了 <code>done</code> 这个 <code>hook</code> 来监听文件的变化。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223709.png" alt="image.png"></p><p>这里我们初步可以看到 <code>start</code> 做了几件事。</p><ul><li>开启 <code>ws</code> ，支持后续和 <code>browser</code> 的通信。</li><li>跟 <code>browser</code> 注入代码，如 entry 加入 <code>webpack-dev-server/client</code> 和 <code>webpack/hot/dev-server.js</code>, 而 <code>plugin</code> 加入 <code>webpack.HotModuleReplacementPlugin</code> 插件, 这些都会在 <code>browser</code> 注入代码以支持热更新的能力。</li><li>注册 <code>webpack</code> 插件：实现文件变化的监听，文件变化后会触发的。</li></ul><ol start="3"><li>网页加载产物后的操作。</li></ol><blockquote><p>注意， <code>Browser</code> 的生命周期和 <code>Dev Server</code> 有所不同， <code>Dev Server</code> 进行初始化的时候，只会有一次，即我们在命令行启动项目的时候。而 <code>Browser</code> 的生命周期是你打开网页的时候。</p></blockquote><ul><li><strong>建立 <code>WebSocket</code> 链接</strong></li></ul><p>由于 <code>browser</code> 注入了 <code>webpack-dev-server</code> 的代码，所以会进行 <code>WebSocket</code> 的链接。便于后续 <code>Dev Server</code> 和 <code>Browser</code> 的通信。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223750.png" alt="image.png"></p><ul><li><strong>注入了 <code>[module.hot](&lt;http://module.hot&gt;)</code> 对象，提供热更新接口</strong></li></ul><p>我们可以看到，我们是能够通过打印 <code>[module.hot](&lt;http://module.hot&gt;)</code> 的变量的，这也是 <code>Webpack</code> 暴露给我们的 <code>[api](&lt;https://webpack.js.org/api/hot-module-replacement&gt;)</code></p><p>有了这些 <code>api</code>, 便于后续我们检查文件变化，并且注册回调，做热更新。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223805.png" alt="image.png"></p><p>但这些 <code>module.hot</code> 是如何来的，具体来说，这块是 <code>HotModuleReplacementPlugin</code> 注入的， <a href="https://github.com/webpack/webpack/blob/651b3d66d10d54da31d4cb7123ea74d10f1f5456/lib/HotModuleReplacementPlugin.js#L196C9-L196C23" target="_blank" rel="noreferrer">传送门</a>。</p><p>具体注入的细节，这里就不细过了。我们只需要知道，目前客户端初始化做了两件事。</p><ul><li>建立 <code>WebSocket</code> 链接，便于后续与 <code>Dev Serve</code> 的通信。</li><li>提供 <code>HMR</code> 的 API。</li></ul><ol start="4"><li>文件更新的过程。</li></ol><p>上文提到，文件更新调用 <code>sendStats</code> ，我们仔细来看，文件热更新的话 &amp;&amp; 文件编译没出错的情况，则会调用 <code>this.sendMessage(clients, &quot;ok&quot;);</code></p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223848.png" alt="image.png"></p><p>同样的，在 <code>client</code> 处，会有一个接受处理 <code>WS</code> 的处理，其中处理 <code>ok</code> 的触发的函数。</p><p>可以看到里面触发了 <code>reloadApp</code> 这个函数。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223906.png" alt="image.png"></p><p>直接看里面的热更新的逻辑，会看到里面通过事件订阅 发送 <code>webpackHotUpdate</code> 。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223918.png" alt="image.png"></p><p>而 <code>webpackHotUpdate</code> 事件，会触发到 <code>[module.hot](&lt;http://module.hot&gt;)</code> 的 <code>check</code> 函数，即图中的 <code>hotCheck</code></p><p>里面这个时候有 **webpack_require**.hmrM 是用于获取 hot-update.json 的。</p><p><img src="https://raw.githubusercontent.com/hua-bang/assert-store/master/20240318223942.png" alt="image.png"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/30669007" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/30669007</a></li><li><a href="https://webpack.js.org/concepts/hot-module-replacement" target="_blank" rel="noreferrer">https://webpack.js.org/concepts/hot-module-replacement</a></li><li><a href="https://blog.jakoblind.no/webpack-hmr/" target="_blank" rel="noreferrer">https://blog.jakoblind.no/webpack-hmr/</a></li><li><a href="https://juejin.cn/book/7115598540721618944/section/7119036095211241472" target="_blank" rel="noreferrer">https://juejin.cn/book/7115598540721618944/section/7119036095211241472</a></li></ul>`,97),p=[l];function t(c,r,E,i,d,y){return a(),o("div",null,p)}const g=s(e,[["render",t]]);export{h as __pageData,g as default};
